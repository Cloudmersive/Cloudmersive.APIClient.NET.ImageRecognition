/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// A person identified in an image gender classification operation
    /// </summary>
    [DataContract]
    public partial class PersonWithGender :  IEquatable<PersonWithGender>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonWithGender" /> class.
        /// </summary>
        /// <param name="faceLocation">Location and other information about the person&#39;s face corresponding to this age classification.</param>
        /// <param name="genderClassificationConfidence">Confidence level of gender classification; possible values are between 0.0 and 1.0; higher is better, with values &amp;gt; 0.50 being high confidence results.</param>
        /// <param name="genderClass">The person&#39;s identified gender; possible values are \&quot;Male\&quot;, \&quot;Female\&quot; and \&quot;Unknown\&quot;.</param>
        public PersonWithGender(Face faceLocation = default(Face), double? genderClassificationConfidence = default(double?), string genderClass = default(string))
        {
            this.FaceLocation = faceLocation;
            this.GenderClassificationConfidence = genderClassificationConfidence;
            this.GenderClass = genderClass;
        }
        
        /// <summary>
        /// Location and other information about the person&#39;s face corresponding to this age classification
        /// </summary>
        /// <value>Location and other information about the person&#39;s face corresponding to this age classification</value>
        [DataMember(Name="FaceLocation", EmitDefaultValue=false)]
        public Face FaceLocation { get; set; }

        /// <summary>
        /// Confidence level of gender classification; possible values are between 0.0 and 1.0; higher is better, with values &amp;gt; 0.50 being high confidence results
        /// </summary>
        /// <value>Confidence level of gender classification; possible values are between 0.0 and 1.0; higher is better, with values &amp;gt; 0.50 being high confidence results</value>
        [DataMember(Name="GenderClassificationConfidence", EmitDefaultValue=false)]
        public double? GenderClassificationConfidence { get; set; }

        /// <summary>
        /// The person&#39;s identified gender; possible values are \&quot;Male\&quot;, \&quot;Female\&quot; and \&quot;Unknown\&quot;
        /// </summary>
        /// <value>The person&#39;s identified gender; possible values are \&quot;Male\&quot;, \&quot;Female\&quot; and \&quot;Unknown\&quot;</value>
        [DataMember(Name="GenderClass", EmitDefaultValue=false)]
        public string GenderClass { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonWithGender {\n");
            sb.Append("  FaceLocation: ").Append(FaceLocation).Append("\n");
            sb.Append("  GenderClassificationConfidence: ").Append(GenderClassificationConfidence).Append("\n");
            sb.Append("  GenderClass: ").Append(GenderClass).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonWithGender);
        }

        /// <summary>
        /// Returns true if PersonWithGender instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonWithGender to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonWithGender input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FaceLocation == input.FaceLocation ||
                    (this.FaceLocation != null &&
                    this.FaceLocation.Equals(input.FaceLocation))
                ) && 
                (
                    this.GenderClassificationConfidence == input.GenderClassificationConfidence ||
                    (this.GenderClassificationConfidence != null &&
                    this.GenderClassificationConfidence.Equals(input.GenderClassificationConfidence))
                ) && 
                (
                    this.GenderClass == input.GenderClass ||
                    (this.GenderClass != null &&
                    this.GenderClass.Equals(input.GenderClass))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FaceLocation != null)
                    hashCode = hashCode * 59 + this.FaceLocation.GetHashCode();
                if (this.GenderClassificationConfidence != null)
                    hashCode = hashCode * 59 + this.GenderClassificationConfidence.GetHashCode();
                if (this.GenderClass != null)
                    hashCode = hashCode * 59 + this.GenderClass.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
