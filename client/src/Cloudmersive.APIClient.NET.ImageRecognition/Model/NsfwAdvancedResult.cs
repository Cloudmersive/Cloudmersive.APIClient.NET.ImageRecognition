/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Result of an Advanced NSFW classification
    /// </summary>
    [DataContract]
    public partial class NsfwAdvancedResult :  IEquatable<NsfwAdvancedResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NsfwAdvancedResult" /> class.
        /// </summary>
        /// <param name="successful">True if the classification was successfully run, false otherwise.</param>
        /// <param name="cleanResult">True if the result was clean, false otherwise.</param>
        /// <param name="containsNudity">True if the image contains nudity or sex, false otherwise.</param>
        /// <param name="containsGraphicViolence">True if the image contains graphic violence and/or gore, false otherwise.</param>
        /// <param name="containsNonGraphicViolence">True if the image contains non-graphic violence, e.g. weapons, false otherwise.</param>
        /// <param name="containsSelfHarm">True if the image contains self-harm or suicide imagery, false otherwise.</param>
        /// <param name="containsHate">True if the image contains hate, false otherwise.</param>
        /// <param name="containsPotentialIllegalActivity">True if the image contains potentially illegal activity such as drugs, false otherwise.</param>
        /// <param name="containsMedicalImagery">True if the image contains medical imagery, false otherwise.</param>
        /// <param name="containsProfanity">True if the image contains profanity or obscenities, false otherwise.</param>
        /// <param name="score">Score between 0.0 and 1.0.  Scores of 0.0-0.2 represent high probability safe content, while scores 0.8-1.0 represent high probability unsafe content.  Content between 0.2 and 0.8 is of increasing raciness..</param>
        /// <param name="classificationOutcome">Classification result into four categories: SafeContent_HighProbability, UnsafeContent_HighProbability, RacyContent, SafeContent_ModerateProbability.</param>
        public NsfwAdvancedResult(bool? successful = default(bool?), bool? cleanResult = default(bool?), bool? containsNudity = default(bool?), bool? containsGraphicViolence = default(bool?), bool? containsNonGraphicViolence = default(bool?), bool? containsSelfHarm = default(bool?), bool? containsHate = default(bool?), bool? containsPotentialIllegalActivity = default(bool?), bool? containsMedicalImagery = default(bool?), bool? containsProfanity = default(bool?), double? score = default(double?), string classificationOutcome = default(string))
        {
            this.Successful = successful;
            this.CleanResult = cleanResult;
            this.ContainsNudity = containsNudity;
            this.ContainsGraphicViolence = containsGraphicViolence;
            this.ContainsNonGraphicViolence = containsNonGraphicViolence;
            this.ContainsSelfHarm = containsSelfHarm;
            this.ContainsHate = containsHate;
            this.ContainsPotentialIllegalActivity = containsPotentialIllegalActivity;
            this.ContainsMedicalImagery = containsMedicalImagery;
            this.ContainsProfanity = containsProfanity;
            this.Score = score;
            this.ClassificationOutcome = classificationOutcome;
        }
        
        /// <summary>
        /// True if the classification was successfully run, false otherwise
        /// </summary>
        /// <value>True if the classification was successfully run, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// True if the result was clean, false otherwise
        /// </summary>
        /// <value>True if the result was clean, false otherwise</value>
        [DataMember(Name="CleanResult", EmitDefaultValue=false)]
        public bool? CleanResult { get; set; }

        /// <summary>
        /// True if the image contains nudity or sex, false otherwise
        /// </summary>
        /// <value>True if the image contains nudity or sex, false otherwise</value>
        [DataMember(Name="ContainsNudity", EmitDefaultValue=false)]
        public bool? ContainsNudity { get; set; }

        /// <summary>
        /// True if the image contains graphic violence and/or gore, false otherwise
        /// </summary>
        /// <value>True if the image contains graphic violence and/or gore, false otherwise</value>
        [DataMember(Name="ContainsGraphicViolence", EmitDefaultValue=false)]
        public bool? ContainsGraphicViolence { get; set; }

        /// <summary>
        /// True if the image contains non-graphic violence, e.g. weapons, false otherwise
        /// </summary>
        /// <value>True if the image contains non-graphic violence, e.g. weapons, false otherwise</value>
        [DataMember(Name="ContainsNonGraphicViolence", EmitDefaultValue=false)]
        public bool? ContainsNonGraphicViolence { get; set; }

        /// <summary>
        /// True if the image contains self-harm or suicide imagery, false otherwise
        /// </summary>
        /// <value>True if the image contains self-harm or suicide imagery, false otherwise</value>
        [DataMember(Name="ContainsSelfHarm", EmitDefaultValue=false)]
        public bool? ContainsSelfHarm { get; set; }

        /// <summary>
        /// True if the image contains hate, false otherwise
        /// </summary>
        /// <value>True if the image contains hate, false otherwise</value>
        [DataMember(Name="ContainsHate", EmitDefaultValue=false)]
        public bool? ContainsHate { get; set; }

        /// <summary>
        /// True if the image contains potentially illegal activity such as drugs, false otherwise
        /// </summary>
        /// <value>True if the image contains potentially illegal activity such as drugs, false otherwise</value>
        [DataMember(Name="ContainsPotentialIllegalActivity", EmitDefaultValue=false)]
        public bool? ContainsPotentialIllegalActivity { get; set; }

        /// <summary>
        /// True if the image contains medical imagery, false otherwise
        /// </summary>
        /// <value>True if the image contains medical imagery, false otherwise</value>
        [DataMember(Name="ContainsMedicalImagery", EmitDefaultValue=false)]
        public bool? ContainsMedicalImagery { get; set; }

        /// <summary>
        /// True if the image contains profanity or obscenities, false otherwise
        /// </summary>
        /// <value>True if the image contains profanity or obscenities, false otherwise</value>
        [DataMember(Name="ContainsProfanity", EmitDefaultValue=false)]
        public bool? ContainsProfanity { get; set; }

        /// <summary>
        /// Score between 0.0 and 1.0.  Scores of 0.0-0.2 represent high probability safe content, while scores 0.8-1.0 represent high probability unsafe content.  Content between 0.2 and 0.8 is of increasing raciness.
        /// </summary>
        /// <value>Score between 0.0 and 1.0.  Scores of 0.0-0.2 represent high probability safe content, while scores 0.8-1.0 represent high probability unsafe content.  Content between 0.2 and 0.8 is of increasing raciness.</value>
        [DataMember(Name="Score", EmitDefaultValue=false)]
        public double? Score { get; set; }

        /// <summary>
        /// Classification result into four categories: SafeContent_HighProbability, UnsafeContent_HighProbability, RacyContent, SafeContent_ModerateProbability
        /// </summary>
        /// <value>Classification result into four categories: SafeContent_HighProbability, UnsafeContent_HighProbability, RacyContent, SafeContent_ModerateProbability</value>
        [DataMember(Name="ClassificationOutcome", EmitDefaultValue=false)]
        public string ClassificationOutcome { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NsfwAdvancedResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  CleanResult: ").Append(CleanResult).Append("\n");
            sb.Append("  ContainsNudity: ").Append(ContainsNudity).Append("\n");
            sb.Append("  ContainsGraphicViolence: ").Append(ContainsGraphicViolence).Append("\n");
            sb.Append("  ContainsNonGraphicViolence: ").Append(ContainsNonGraphicViolence).Append("\n");
            sb.Append("  ContainsSelfHarm: ").Append(ContainsSelfHarm).Append("\n");
            sb.Append("  ContainsHate: ").Append(ContainsHate).Append("\n");
            sb.Append("  ContainsPotentialIllegalActivity: ").Append(ContainsPotentialIllegalActivity).Append("\n");
            sb.Append("  ContainsMedicalImagery: ").Append(ContainsMedicalImagery).Append("\n");
            sb.Append("  ContainsProfanity: ").Append(ContainsProfanity).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  ClassificationOutcome: ").Append(ClassificationOutcome).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as NsfwAdvancedResult);
        }

        /// <summary>
        /// Returns true if NsfwAdvancedResult instances are equal
        /// </summary>
        /// <param name="input">Instance of NsfwAdvancedResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NsfwAdvancedResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.CleanResult == input.CleanResult ||
                    (this.CleanResult != null &&
                    this.CleanResult.Equals(input.CleanResult))
                ) && 
                (
                    this.ContainsNudity == input.ContainsNudity ||
                    (this.ContainsNudity != null &&
                    this.ContainsNudity.Equals(input.ContainsNudity))
                ) && 
                (
                    this.ContainsGraphicViolence == input.ContainsGraphicViolence ||
                    (this.ContainsGraphicViolence != null &&
                    this.ContainsGraphicViolence.Equals(input.ContainsGraphicViolence))
                ) && 
                (
                    this.ContainsNonGraphicViolence == input.ContainsNonGraphicViolence ||
                    (this.ContainsNonGraphicViolence != null &&
                    this.ContainsNonGraphicViolence.Equals(input.ContainsNonGraphicViolence))
                ) && 
                (
                    this.ContainsSelfHarm == input.ContainsSelfHarm ||
                    (this.ContainsSelfHarm != null &&
                    this.ContainsSelfHarm.Equals(input.ContainsSelfHarm))
                ) && 
                (
                    this.ContainsHate == input.ContainsHate ||
                    (this.ContainsHate != null &&
                    this.ContainsHate.Equals(input.ContainsHate))
                ) && 
                (
                    this.ContainsPotentialIllegalActivity == input.ContainsPotentialIllegalActivity ||
                    (this.ContainsPotentialIllegalActivity != null &&
                    this.ContainsPotentialIllegalActivity.Equals(input.ContainsPotentialIllegalActivity))
                ) && 
                (
                    this.ContainsMedicalImagery == input.ContainsMedicalImagery ||
                    (this.ContainsMedicalImagery != null &&
                    this.ContainsMedicalImagery.Equals(input.ContainsMedicalImagery))
                ) && 
                (
                    this.ContainsProfanity == input.ContainsProfanity ||
                    (this.ContainsProfanity != null &&
                    this.ContainsProfanity.Equals(input.ContainsProfanity))
                ) && 
                (
                    this.Score == input.Score ||
                    (this.Score != null &&
                    this.Score.Equals(input.Score))
                ) && 
                (
                    this.ClassificationOutcome == input.ClassificationOutcome ||
                    (this.ClassificationOutcome != null &&
                    this.ClassificationOutcome.Equals(input.ClassificationOutcome))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.CleanResult != null)
                    hashCode = hashCode * 59 + this.CleanResult.GetHashCode();
                if (this.ContainsNudity != null)
                    hashCode = hashCode * 59 + this.ContainsNudity.GetHashCode();
                if (this.ContainsGraphicViolence != null)
                    hashCode = hashCode * 59 + this.ContainsGraphicViolence.GetHashCode();
                if (this.ContainsNonGraphicViolence != null)
                    hashCode = hashCode * 59 + this.ContainsNonGraphicViolence.GetHashCode();
                if (this.ContainsSelfHarm != null)
                    hashCode = hashCode * 59 + this.ContainsSelfHarm.GetHashCode();
                if (this.ContainsHate != null)
                    hashCode = hashCode * 59 + this.ContainsHate.GetHashCode();
                if (this.ContainsPotentialIllegalActivity != null)
                    hashCode = hashCode * 59 + this.ContainsPotentialIllegalActivity.GetHashCode();
                if (this.ContainsMedicalImagery != null)
                    hashCode = hashCode * 59 + this.ContainsMedicalImagery.GetHashCode();
                if (this.ContainsProfanity != null)
                    hashCode = hashCode * 59 + this.ContainsProfanity.GetHashCode();
                if (this.Score != null)
                    hashCode = hashCode * 59 + this.Score.GetHashCode();
                if (this.ClassificationOutcome != null)
                    hashCode = hashCode * 59 + this.ClassificationOutcome.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
