/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Individual instance of text occuring in an image; one piece of text
    /// </summary>
    [DataContract]
    public partial class FineTextItem :  IEquatable<FineTextItem>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FineTextItem" /> class.
        /// </summary>
        /// <param name="topLeftX">X coordinate of the top/left text location; 0 represents the left edge of the input image.</param>
        /// <param name="topLeftY">Y coordinate of the top/left text location; 0 represents the top edge of the input image.</param>
        /// <param name="topRightX">X coordinate of the top/right text location; 0 represents the left edge of the input image.</param>
        /// <param name="topRightY">Y coordinate of the top/right text location; 0 represents the top edge of the input image.</param>
        /// <param name="bottomLeftX">X coordinate of the bottom/left text location; 0 represents the left edge of the input image.</param>
        /// <param name="bottomLeftY">Y coordinate of the bottom/left text location; 0 represents the top edge of the input image.</param>
        /// <param name="bottomRightX">X coordinate of the bottom/right text location; 0 represents the left edge of the input image.</param>
        /// <param name="bottomRightY">Y coordinate of the bottom/right text location; 0 represents the top edge of the input image.</param>
        /// <param name="width">Width in pixels of the text.</param>
        /// <param name="height">Height in pixels of the text.</param>
        /// <param name="angle">Rotation Angle in radians of the text.</param>
        public FineTextItem(int? topLeftX = default(int?), int? topLeftY = default(int?), int? topRightX = default(int?), int? topRightY = default(int?), int? bottomLeftX = default(int?), int? bottomLeftY = default(int?), int? bottomRightX = default(int?), int? bottomRightY = default(int?), int? width = default(int?), int? height = default(int?), double? angle = default(double?))
        {
            this.TopLeftX = topLeftX;
            this.TopLeftY = topLeftY;
            this.TopRightX = topRightX;
            this.TopRightY = topRightY;
            this.BottomLeftX = bottomLeftX;
            this.BottomLeftY = bottomLeftY;
            this.BottomRightX = bottomRightX;
            this.BottomRightY = bottomRightY;
            this.Width = width;
            this.Height = height;
            this.Angle = angle;
        }
        
        /// <summary>
        /// X coordinate of the top/left text location; 0 represents the left edge of the input image
        /// </summary>
        /// <value>X coordinate of the top/left text location; 0 represents the left edge of the input image</value>
        [DataMember(Name="TopLeftX", EmitDefaultValue=false)]
        public int? TopLeftX { get; set; }

        /// <summary>
        /// Y coordinate of the top/left text location; 0 represents the top edge of the input image
        /// </summary>
        /// <value>Y coordinate of the top/left text location; 0 represents the top edge of the input image</value>
        [DataMember(Name="TopLeftY", EmitDefaultValue=false)]
        public int? TopLeftY { get; set; }

        /// <summary>
        /// X coordinate of the top/right text location; 0 represents the left edge of the input image
        /// </summary>
        /// <value>X coordinate of the top/right text location; 0 represents the left edge of the input image</value>
        [DataMember(Name="TopRightX", EmitDefaultValue=false)]
        public int? TopRightX { get; set; }

        /// <summary>
        /// Y coordinate of the top/right text location; 0 represents the top edge of the input image
        /// </summary>
        /// <value>Y coordinate of the top/right text location; 0 represents the top edge of the input image</value>
        [DataMember(Name="TopRightY", EmitDefaultValue=false)]
        public int? TopRightY { get; set; }

        /// <summary>
        /// X coordinate of the bottom/left text location; 0 represents the left edge of the input image
        /// </summary>
        /// <value>X coordinate of the bottom/left text location; 0 represents the left edge of the input image</value>
        [DataMember(Name="BottomLeftX", EmitDefaultValue=false)]
        public int? BottomLeftX { get; set; }

        /// <summary>
        /// Y coordinate of the bottom/left text location; 0 represents the top edge of the input image
        /// </summary>
        /// <value>Y coordinate of the bottom/left text location; 0 represents the top edge of the input image</value>
        [DataMember(Name="BottomLeftY", EmitDefaultValue=false)]
        public int? BottomLeftY { get; set; }

        /// <summary>
        /// X coordinate of the bottom/right text location; 0 represents the left edge of the input image
        /// </summary>
        /// <value>X coordinate of the bottom/right text location; 0 represents the left edge of the input image</value>
        [DataMember(Name="BottomRightX", EmitDefaultValue=false)]
        public int? BottomRightX { get; set; }

        /// <summary>
        /// Y coordinate of the bottom/right text location; 0 represents the top edge of the input image
        /// </summary>
        /// <value>Y coordinate of the bottom/right text location; 0 represents the top edge of the input image</value>
        [DataMember(Name="BottomRightY", EmitDefaultValue=false)]
        public int? BottomRightY { get; set; }

        /// <summary>
        /// Width in pixels of the text
        /// </summary>
        /// <value>Width in pixels of the text</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Height in pixels of the text
        /// </summary>
        /// <value>Height in pixels of the text</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Rotation Angle in radians of the text
        /// </summary>
        /// <value>Rotation Angle in radians of the text</value>
        [DataMember(Name="Angle", EmitDefaultValue=false)]
        public double? Angle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FineTextItem {\n");
            sb.Append("  TopLeftX: ").Append(TopLeftX).Append("\n");
            sb.Append("  TopLeftY: ").Append(TopLeftY).Append("\n");
            sb.Append("  TopRightX: ").Append(TopRightX).Append("\n");
            sb.Append("  TopRightY: ").Append(TopRightY).Append("\n");
            sb.Append("  BottomLeftX: ").Append(BottomLeftX).Append("\n");
            sb.Append("  BottomLeftY: ").Append(BottomLeftY).Append("\n");
            sb.Append("  BottomRightX: ").Append(BottomRightX).Append("\n");
            sb.Append("  BottomRightY: ").Append(BottomRightY).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Angle: ").Append(Angle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FineTextItem);
        }

        /// <summary>
        /// Returns true if FineTextItem instances are equal
        /// </summary>
        /// <param name="input">Instance of FineTextItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FineTextItem input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TopLeftX == input.TopLeftX ||
                    (this.TopLeftX != null &&
                    this.TopLeftX.Equals(input.TopLeftX))
                ) && 
                (
                    this.TopLeftY == input.TopLeftY ||
                    (this.TopLeftY != null &&
                    this.TopLeftY.Equals(input.TopLeftY))
                ) && 
                (
                    this.TopRightX == input.TopRightX ||
                    (this.TopRightX != null &&
                    this.TopRightX.Equals(input.TopRightX))
                ) && 
                (
                    this.TopRightY == input.TopRightY ||
                    (this.TopRightY != null &&
                    this.TopRightY.Equals(input.TopRightY))
                ) && 
                (
                    this.BottomLeftX == input.BottomLeftX ||
                    (this.BottomLeftX != null &&
                    this.BottomLeftX.Equals(input.BottomLeftX))
                ) && 
                (
                    this.BottomLeftY == input.BottomLeftY ||
                    (this.BottomLeftY != null &&
                    this.BottomLeftY.Equals(input.BottomLeftY))
                ) && 
                (
                    this.BottomRightX == input.BottomRightX ||
                    (this.BottomRightX != null &&
                    this.BottomRightX.Equals(input.BottomRightX))
                ) && 
                (
                    this.BottomRightY == input.BottomRightY ||
                    (this.BottomRightY != null &&
                    this.BottomRightY.Equals(input.BottomRightY))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.Angle == input.Angle ||
                    (this.Angle != null &&
                    this.Angle.Equals(input.Angle))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TopLeftX != null)
                    hashCode = hashCode * 59 + this.TopLeftX.GetHashCode();
                if (this.TopLeftY != null)
                    hashCode = hashCode * 59 + this.TopLeftY.GetHashCode();
                if (this.TopRightX != null)
                    hashCode = hashCode * 59 + this.TopRightX.GetHashCode();
                if (this.TopRightY != null)
                    hashCode = hashCode * 59 + this.TopRightY.GetHashCode();
                if (this.BottomLeftX != null)
                    hashCode = hashCode * 59 + this.BottomLeftX.GetHashCode();
                if (this.BottomLeftY != null)
                    hashCode = hashCode * 59 + this.BottomLeftY.GetHashCode();
                if (this.BottomRightX != null)
                    hashCode = hashCode * 59 + this.BottomRightX.GetHashCode();
                if (this.BottomRightY != null)
                    hashCode = hashCode * 59 + this.BottomRightY.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.Angle != null)
                    hashCode = hashCode * 59 + this.Angle.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
