/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// License plate found in the image
    /// </summary>
    [DataContract]
    public partial class DetectedLicensePlate :  IEquatable<DetectedLicensePlate>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetectedLicensePlate" /> class.
        /// </summary>
        /// <param name="licensePlateTextBestMatch">Text from the license plate, highest-confidence result.</param>
        /// <param name="licensePlateTextRunnerUp">Alternate text from the license plate, based on second-highest-confidence result.</param>
        /// <param name="locationX">X location of the left edge of the license plate, starting from the left edge of the photo (X &#x3D; 0).</param>
        /// <param name="locationY">Y location of the top edge of the license plate, starting from the top edge of the photo (Y &#x3D; 0).</param>
        /// <param name="width">Width of the license plate&#39;s location in pixels.</param>
        /// <param name="height">Height of the license plate&#39;s location in pixels.</param>
        /// <param name="licensePlateRecognitionConfidenceLevel">Confidence score on a range of 0.0 - 1.0 of the accuracy of the detected license plate, with higher scores being better; values about 0.75 are high confidence.</param>
        public DetectedLicensePlate(string licensePlateTextBestMatch = default(string), string licensePlateTextRunnerUp = default(string), int? locationX = default(int?), int? locationY = default(int?), int? width = default(int?), int? height = default(int?), double? licensePlateRecognitionConfidenceLevel = default(double?))
        {
            this.LicensePlateTextBestMatch = licensePlateTextBestMatch;
            this.LicensePlateTextRunnerUp = licensePlateTextRunnerUp;
            this.LocationX = locationX;
            this.LocationY = locationY;
            this.Width = width;
            this.Height = height;
            this.LicensePlateRecognitionConfidenceLevel = licensePlateRecognitionConfidenceLevel;
        }
        
        /// <summary>
        /// Text from the license plate, highest-confidence result
        /// </summary>
        /// <value>Text from the license plate, highest-confidence result</value>
        [DataMember(Name="LicensePlateText_BestMatch", EmitDefaultValue=false)]
        public string LicensePlateTextBestMatch { get; set; }

        /// <summary>
        /// Alternate text from the license plate, based on second-highest-confidence result
        /// </summary>
        /// <value>Alternate text from the license plate, based on second-highest-confidence result</value>
        [DataMember(Name="LicensePlateText_RunnerUp", EmitDefaultValue=false)]
        public string LicensePlateTextRunnerUp { get; set; }

        /// <summary>
        /// X location of the left edge of the license plate, starting from the left edge of the photo (X &#x3D; 0)
        /// </summary>
        /// <value>X location of the left edge of the license plate, starting from the left edge of the photo (X &#x3D; 0)</value>
        [DataMember(Name="LocationX", EmitDefaultValue=false)]
        public int? LocationX { get; set; }

        /// <summary>
        /// Y location of the top edge of the license plate, starting from the top edge of the photo (Y &#x3D; 0)
        /// </summary>
        /// <value>Y location of the top edge of the license plate, starting from the top edge of the photo (Y &#x3D; 0)</value>
        [DataMember(Name="LocationY", EmitDefaultValue=false)]
        public int? LocationY { get; set; }

        /// <summary>
        /// Width of the license plate&#39;s location in pixels
        /// </summary>
        /// <value>Width of the license plate&#39;s location in pixels</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Height of the license plate&#39;s location in pixels
        /// </summary>
        /// <value>Height of the license plate&#39;s location in pixels</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Confidence score on a range of 0.0 - 1.0 of the accuracy of the detected license plate, with higher scores being better; values about 0.75 are high confidence
        /// </summary>
        /// <value>Confidence score on a range of 0.0 - 1.0 of the accuracy of the detected license plate, with higher scores being better; values about 0.75 are high confidence</value>
        [DataMember(Name="LicensePlateRecognitionConfidenceLevel", EmitDefaultValue=false)]
        public double? LicensePlateRecognitionConfidenceLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetectedLicensePlate {\n");
            sb.Append("  LicensePlateTextBestMatch: ").Append(LicensePlateTextBestMatch).Append("\n");
            sb.Append("  LicensePlateTextRunnerUp: ").Append(LicensePlateTextRunnerUp).Append("\n");
            sb.Append("  LocationX: ").Append(LocationX).Append("\n");
            sb.Append("  LocationY: ").Append(LocationY).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  LicensePlateRecognitionConfidenceLevel: ").Append(LicensePlateRecognitionConfidenceLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DetectedLicensePlate);
        }

        /// <summary>
        /// Returns true if DetectedLicensePlate instances are equal
        /// </summary>
        /// <param name="input">Instance of DetectedLicensePlate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetectedLicensePlate input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LicensePlateTextBestMatch == input.LicensePlateTextBestMatch ||
                    (this.LicensePlateTextBestMatch != null &&
                    this.LicensePlateTextBestMatch.Equals(input.LicensePlateTextBestMatch))
                ) && 
                (
                    this.LicensePlateTextRunnerUp == input.LicensePlateTextRunnerUp ||
                    (this.LicensePlateTextRunnerUp != null &&
                    this.LicensePlateTextRunnerUp.Equals(input.LicensePlateTextRunnerUp))
                ) && 
                (
                    this.LocationX == input.LocationX ||
                    (this.LocationX != null &&
                    this.LocationX.Equals(input.LocationX))
                ) && 
                (
                    this.LocationY == input.LocationY ||
                    (this.LocationY != null &&
                    this.LocationY.Equals(input.LocationY))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.LicensePlateRecognitionConfidenceLevel == input.LicensePlateRecognitionConfidenceLevel ||
                    (this.LicensePlateRecognitionConfidenceLevel != null &&
                    this.LicensePlateRecognitionConfidenceLevel.Equals(input.LicensePlateRecognitionConfidenceLevel))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LicensePlateTextBestMatch != null)
                    hashCode = hashCode * 59 + this.LicensePlateTextBestMatch.GetHashCode();
                if (this.LicensePlateTextRunnerUp != null)
                    hashCode = hashCode * 59 + this.LicensePlateTextRunnerUp.GetHashCode();
                if (this.LocationX != null)
                    hashCode = hashCode * 59 + this.LocationX.GetHashCode();
                if (this.LocationY != null)
                    hashCode = hashCode * 59 + this.LocationY.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.LicensePlateRecognitionConfidenceLevel != null)
                    hashCode = hashCode * 59 + this.LicensePlateRecognitionConfidenceLevel.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
