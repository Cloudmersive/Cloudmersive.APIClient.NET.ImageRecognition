/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Request to create a PNG of handwriting
    /// </summary>
    [DataContract]
    public partial class CreateHandwritingRequest :  IEquatable<CreateHandwritingRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="CreateHandwritingRequest" /> class.
        /// </summary>
        /// <param name="textInput">Text to convert to handwriting.</param>
        /// <param name="targetWidth">Desired width in pixels of the resulting image.</param>
        /// <param name="strokeWidth">Optinoal; Width of the text stroke in pixels; default is 2.</param>
        /// <param name="color">HTML hexadecimal color, or HTML common color name (e.g. &#39;black&#39;, &#39;red&#39;), for the handwriting.</param>
        public CreateHandwritingRequest(string textInput = default(string), int? targetWidth = default(int?), int? strokeWidth = default(int?), string color = default(string))
        {
            this.TextInput = textInput;
            this.TargetWidth = targetWidth;
            this.StrokeWidth = strokeWidth;
            this.Color = color;
        }
        
        /// <summary>
        /// Text to convert to handwriting
        /// </summary>
        /// <value>Text to convert to handwriting</value>
        [DataMember(Name="TextInput", EmitDefaultValue=false)]
        public string TextInput { get; set; }

        /// <summary>
        /// Desired width in pixels of the resulting image
        /// </summary>
        /// <value>Desired width in pixels of the resulting image</value>
        [DataMember(Name="TargetWidth", EmitDefaultValue=false)]
        public int? TargetWidth { get; set; }

        /// <summary>
        /// Optinoal; Width of the text stroke in pixels; default is 2
        /// </summary>
        /// <value>Optinoal; Width of the text stroke in pixels; default is 2</value>
        [DataMember(Name="StrokeWidth", EmitDefaultValue=false)]
        public int? StrokeWidth { get; set; }

        /// <summary>
        /// HTML hexadecimal color, or HTML common color name (e.g. &#39;black&#39;, &#39;red&#39;), for the handwriting
        /// </summary>
        /// <value>HTML hexadecimal color, or HTML common color name (e.g. &#39;black&#39;, &#39;red&#39;), for the handwriting</value>
        [DataMember(Name="Color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateHandwritingRequest {\n");
            sb.Append("  TextInput: ").Append(TextInput).Append("\n");
            sb.Append("  TargetWidth: ").Append(TargetWidth).Append("\n");
            sb.Append("  StrokeWidth: ").Append(StrokeWidth).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as CreateHandwritingRequest);
        }

        /// <summary>
        /// Returns true if CreateHandwritingRequest instances are equal
        /// </summary>
        /// <param name="input">Instance of CreateHandwritingRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateHandwritingRequest input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.TextInput == input.TextInput ||
                    (this.TextInput != null &&
                    this.TextInput.Equals(input.TextInput))
                ) && 
                (
                    this.TargetWidth == input.TargetWidth ||
                    (this.TargetWidth != null &&
                    this.TargetWidth.Equals(input.TargetWidth))
                ) && 
                (
                    this.StrokeWidth == input.StrokeWidth ||
                    (this.StrokeWidth != null &&
                    this.StrokeWidth.Equals(input.StrokeWidth))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.TextInput != null)
                    hashCode = hashCode * 59 + this.TextInput.GetHashCode();
                if (this.TargetWidth != null)
                    hashCode = hashCode * 59 + this.TargetWidth.GetHashCode();
                if (this.StrokeWidth != null)
                    hashCode = hashCode * 59 + this.StrokeWidth.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
