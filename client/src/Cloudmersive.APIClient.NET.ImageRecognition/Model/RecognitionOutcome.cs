/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Specific recognition outcome
    /// </summary>
    [DataContract]
    public partial class RecognitionOutcome :  IEquatable<RecognitionOutcome>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RecognitionOutcome" /> class.
        /// </summary>
        /// <param name="ConfidenceScore">Scores closer to 1 are better than scores closer to 0.</param>
        /// <param name="Description">English language description of the image.</param>
        public RecognitionOutcome(double? ConfidenceScore = default(double?), string Description = default(string))
        {
            this.ConfidenceScore = ConfidenceScore;
            this.Description = Description;
        }
        
        /// <summary>
        /// Scores closer to 1 are better than scores closer to 0
        /// </summary>
        /// <value>Scores closer to 1 are better than scores closer to 0</value>
        [DataMember(Name="ConfidenceScore", EmitDefaultValue=false)]
        public double? ConfidenceScore { get; set; }

        /// <summary>
        /// English language description of the image
        /// </summary>
        /// <value>English language description of the image</value>
        [DataMember(Name="Description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RecognitionOutcome {\n");
            sb.Append("  ConfidenceScore: ").Append(ConfidenceScore).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as RecognitionOutcome);
        }

        /// <summary>
        /// Returns true if RecognitionOutcome instances are equal
        /// </summary>
        /// <param name="input">Instance of RecognitionOutcome to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RecognitionOutcome input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ConfidenceScore == input.ConfidenceScore ||
                    (this.ConfidenceScore != null &&
                    this.ConfidenceScore.Equals(input.ConfidenceScore))
                ) && 
                (
                    this.Description == input.Description ||
                    (this.Description != null &&
                    this.Description.Equals(input.Description))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ConfidenceScore != null)
                    hashCode = hashCode * 59 + this.ConfidenceScore.GetHashCode();
                if (this.Description != null)
                    hashCode = hashCode * 59 + this.Description.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
