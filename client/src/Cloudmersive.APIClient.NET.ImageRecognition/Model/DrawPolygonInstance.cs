/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Polygon instance to draw on an image
    /// </summary>
    [DataContract]
    public partial class DrawPolygonInstance :  IEquatable<DrawPolygonInstance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DrawPolygonInstance" /> class.
        /// </summary>
        /// <param name="borderColor">Border Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported..</param>
        /// <param name="borderWidth">Width in pixels of the border.  Pass in 0 to draw a polygon with no border.</param>
        /// <param name="fillColor">Fill Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  Leave blank to not fill the polygon..</param>
        /// <param name="points">Points (vertices) which comprise the polygon; valid polygons must have at least 3 points.</param>
        public DrawPolygonInstance(string borderColor = default(string), double? borderWidth = default(double?), string fillColor = default(string), List<PolygonPoint> points = default(List<PolygonPoint>))
        {
            this.BorderColor = borderColor;
            this.BorderWidth = borderWidth;
            this.FillColor = fillColor;
            this.Points = points;
        }
        
        /// <summary>
        /// Border Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.
        /// </summary>
        /// <value>Border Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.</value>
        [DataMember(Name="BorderColor", EmitDefaultValue=false)]
        public string BorderColor { get; set; }

        /// <summary>
        /// Width in pixels of the border.  Pass in 0 to draw a polygon with no border
        /// </summary>
        /// <value>Width in pixels of the border.  Pass in 0 to draw a polygon with no border</value>
        [DataMember(Name="BorderWidth", EmitDefaultValue=false)]
        public double? BorderWidth { get; set; }

        /// <summary>
        /// Fill Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  Leave blank to not fill the polygon.
        /// </summary>
        /// <value>Fill Color to use - can be a hex value (with #) or HTML common color name.  Transparent colors are supported.  Leave blank to not fill the polygon.</value>
        [DataMember(Name="FillColor", EmitDefaultValue=false)]
        public string FillColor { get; set; }

        /// <summary>
        /// Points (vertices) which comprise the polygon; valid polygons must have at least 3 points
        /// </summary>
        /// <value>Points (vertices) which comprise the polygon; valid polygons must have at least 3 points</value>
        [DataMember(Name="Points", EmitDefaultValue=false)]
        public List<PolygonPoint> Points { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DrawPolygonInstance {\n");
            sb.Append("  BorderColor: ").Append(BorderColor).Append("\n");
            sb.Append("  BorderWidth: ").Append(BorderWidth).Append("\n");
            sb.Append("  FillColor: ").Append(FillColor).Append("\n");
            sb.Append("  Points: ").Append(Points).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DrawPolygonInstance);
        }

        /// <summary>
        /// Returns true if DrawPolygonInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of DrawPolygonInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DrawPolygonInstance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.BorderColor == input.BorderColor ||
                    (this.BorderColor != null &&
                    this.BorderColor.Equals(input.BorderColor))
                ) && 
                (
                    this.BorderWidth == input.BorderWidth ||
                    (this.BorderWidth != null &&
                    this.BorderWidth.Equals(input.BorderWidth))
                ) && 
                (
                    this.FillColor == input.FillColor ||
                    (this.FillColor != null &&
                    this.FillColor.Equals(input.FillColor))
                ) && 
                (
                    this.Points == input.Points ||
                    this.Points != null &&
                    this.Points.SequenceEqual(input.Points)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.BorderColor != null)
                    hashCode = hashCode * 59 + this.BorderColor.GetHashCode();
                if (this.BorderWidth != null)
                    hashCode = hashCode * 59 + this.BorderWidth.GetHashCode();
                if (this.FillColor != null)
                    hashCode = hashCode * 59 + this.FillColor.GetHashCode();
                if (this.Points != null)
                    hashCode = hashCode * 59 + this.Points.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
