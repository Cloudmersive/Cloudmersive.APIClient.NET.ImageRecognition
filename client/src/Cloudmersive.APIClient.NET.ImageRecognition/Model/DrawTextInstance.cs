/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Text instance to draw on an image
    /// </summary>
    [DataContract]
    public partial class DrawTextInstance :  IEquatable<DrawTextInstance>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DrawTextInstance" /> class.
        /// </summary>
        /// <param name="text">Text string to draw.</param>
        /// <param name="fontFamilyName">Font Family to use.  Leave blank to default to \&quot;Arial\&quot;.  Supported fonts including Arial, Calibri, Cambria, Candara, Consolas, Constantia, Corbel, Courier New, Courier Regular, Georgia, Impact Regular, Lucida, Modern Regular, Tahoma, Times New Roman, Verdana.</param>
        /// <param name="fontSize">Font size to use..</param>
        /// <param name="color">Color to use - can be a hex value (with #) or HTML common color name.</param>
        /// <param name="x">Pixel location of the left edge of the text location.</param>
        /// <param name="y">Pixel location of the top edge of the text location.</param>
        /// <param name="width">Width in pixels of the text box to draw the text in; text will wrap inside this box.</param>
        /// <param name="height">Height in pixels of the text box to draw the text in; text will wrap inside this box.</param>
        public DrawTextInstance(string text = default(string), string fontFamilyName = default(string), double? fontSize = default(double?), string color = default(string), double? x = default(double?), double? y = default(double?), double? width = default(double?), double? height = default(double?))
        {
            this.Text = text;
            this.FontFamilyName = fontFamilyName;
            this.FontSize = fontSize;
            this.Color = color;
            this.X = x;
            this.Y = y;
            this.Width = width;
            this.Height = height;
        }
        
        /// <summary>
        /// Text string to draw
        /// </summary>
        /// <value>Text string to draw</value>
        [DataMember(Name="Text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Font Family to use.  Leave blank to default to \&quot;Arial\&quot;.  Supported fonts including Arial, Calibri, Cambria, Candara, Consolas, Constantia, Corbel, Courier New, Courier Regular, Georgia, Impact Regular, Lucida, Modern Regular, Tahoma, Times New Roman, Verdana
        /// </summary>
        /// <value>Font Family to use.  Leave blank to default to \&quot;Arial\&quot;.  Supported fonts including Arial, Calibri, Cambria, Candara, Consolas, Constantia, Corbel, Courier New, Courier Regular, Georgia, Impact Regular, Lucida, Modern Regular, Tahoma, Times New Roman, Verdana</value>
        [DataMember(Name="FontFamilyName", EmitDefaultValue=false)]
        public string FontFamilyName { get; set; }

        /// <summary>
        /// Font size to use.
        /// </summary>
        /// <value>Font size to use.</value>
        [DataMember(Name="FontSize", EmitDefaultValue=false)]
        public double? FontSize { get; set; }

        /// <summary>
        /// Color to use - can be a hex value (with #) or HTML common color name
        /// </summary>
        /// <value>Color to use - can be a hex value (with #) or HTML common color name</value>
        [DataMember(Name="Color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// Pixel location of the left edge of the text location
        /// </summary>
        /// <value>Pixel location of the left edge of the text location</value>
        [DataMember(Name="X", EmitDefaultValue=false)]
        public double? X { get; set; }

        /// <summary>
        /// Pixel location of the top edge of the text location
        /// </summary>
        /// <value>Pixel location of the top edge of the text location</value>
        [DataMember(Name="Y", EmitDefaultValue=false)]
        public double? Y { get; set; }

        /// <summary>
        /// Width in pixels of the text box to draw the text in; text will wrap inside this box
        /// </summary>
        /// <value>Width in pixels of the text box to draw the text in; text will wrap inside this box</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public double? Width { get; set; }

        /// <summary>
        /// Height in pixels of the text box to draw the text in; text will wrap inside this box
        /// </summary>
        /// <value>Height in pixels of the text box to draw the text in; text will wrap inside this box</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public double? Height { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DrawTextInstance {\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  FontFamilyName: ").Append(FontFamilyName).Append("\n");
            sb.Append("  FontSize: ").Append(FontSize).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  X: ").Append(X).Append("\n");
            sb.Append("  Y: ").Append(Y).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as DrawTextInstance);
        }

        /// <summary>
        /// Returns true if DrawTextInstance instances are equal
        /// </summary>
        /// <param name="input">Instance of DrawTextInstance to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DrawTextInstance input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Text == input.Text ||
                    (this.Text != null &&
                    this.Text.Equals(input.Text))
                ) && 
                (
                    this.FontFamilyName == input.FontFamilyName ||
                    (this.FontFamilyName != null &&
                    this.FontFamilyName.Equals(input.FontFamilyName))
                ) && 
                (
                    this.FontSize == input.FontSize ||
                    (this.FontSize != null &&
                    this.FontSize.Equals(input.FontSize))
                ) && 
                (
                    this.Color == input.Color ||
                    (this.Color != null &&
                    this.Color.Equals(input.Color))
                ) && 
                (
                    this.X == input.X ||
                    (this.X != null &&
                    this.X.Equals(input.X))
                ) && 
                (
                    this.Y == input.Y ||
                    (this.Y != null &&
                    this.Y.Equals(input.Y))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Text != null)
                    hashCode = hashCode * 59 + this.Text.GetHashCode();
                if (this.FontFamilyName != null)
                    hashCode = hashCode * 59 + this.FontFamilyName.GetHashCode();
                if (this.FontSize != null)
                    hashCode = hashCode * 59 + this.FontSize.GetHashCode();
                if (this.Color != null)
                    hashCode = hashCode * 59 + this.Color.GetHashCode();
                if (this.X != null)
                    hashCode = hashCode * 59 + this.X.GetHashCode();
                if (this.Y != null)
                    hashCode = hashCode * 59 + this.Y.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
