/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Metadata from an image
    /// </summary>
    [DataContract]
    public partial class ImageMetadata :  IEquatable<ImageMetadata>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ImageMetadata" /> class.
        /// </summary>
        /// <param name="successful">True if the operation was successful, false otherwise.</param>
        /// <param name="isValidImage">True if the input image is a valid image file, false otherwise.</param>
        /// <param name="fileFormat">File format of the image.</param>
        /// <param name="width">Width of the image in pixels.</param>
        /// <param name="height">Height of the image in pixels.</param>
        /// <param name="bitDepth">Bits per pixel.</param>
        /// <param name="hasTransparency">True if the image has transaprency in the form of an alpha channel, false otherwise.</param>
        /// <param name="colorSpace">Color space of the image.</param>
        /// <param name="exifProfileName">Name of the EXIF profile used.</param>
        /// <param name="exifValues">EXIF tags and values embedded in the image.</param>
        public ImageMetadata(bool? successful = default(bool?), bool? isValidImage = default(bool?), string fileFormat = default(string), int? width = default(int?), int? height = default(int?), int? bitDepth = default(int?), bool? hasTransparency = default(bool?), string colorSpace = default(string), string exifProfileName = default(string), List<ImageMetadataExifValue> exifValues = default(List<ImageMetadataExifValue>))
        {
            this.Successful = successful;
            this.IsValidImage = isValidImage;
            this.FileFormat = fileFormat;
            this.Width = width;
            this.Height = height;
            this.BitDepth = bitDepth;
            this.HasTransparency = hasTransparency;
            this.ColorSpace = colorSpace;
            this.ExifProfileName = exifProfileName;
            this.ExifValues = exifValues;
        }
        
        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// True if the input image is a valid image file, false otherwise
        /// </summary>
        /// <value>True if the input image is a valid image file, false otherwise</value>
        [DataMember(Name="IsValidImage", EmitDefaultValue=false)]
        public bool? IsValidImage { get; set; }

        /// <summary>
        /// File format of the image
        /// </summary>
        /// <value>File format of the image</value>
        [DataMember(Name="FileFormat", EmitDefaultValue=false)]
        public string FileFormat { get; set; }

        /// <summary>
        /// Width of the image in pixels
        /// </summary>
        /// <value>Width of the image in pixels</value>
        [DataMember(Name="Width", EmitDefaultValue=false)]
        public int? Width { get; set; }

        /// <summary>
        /// Height of the image in pixels
        /// </summary>
        /// <value>Height of the image in pixels</value>
        [DataMember(Name="Height", EmitDefaultValue=false)]
        public int? Height { get; set; }

        /// <summary>
        /// Bits per pixel
        /// </summary>
        /// <value>Bits per pixel</value>
        [DataMember(Name="BitDepth", EmitDefaultValue=false)]
        public int? BitDepth { get; set; }

        /// <summary>
        /// True if the image has transaprency in the form of an alpha channel, false otherwise
        /// </summary>
        /// <value>True if the image has transaprency in the form of an alpha channel, false otherwise</value>
        [DataMember(Name="HasTransparency", EmitDefaultValue=false)]
        public bool? HasTransparency { get; set; }

        /// <summary>
        /// Color space of the image
        /// </summary>
        /// <value>Color space of the image</value>
        [DataMember(Name="ColorSpace", EmitDefaultValue=false)]
        public string ColorSpace { get; set; }

        /// <summary>
        /// Name of the EXIF profile used
        /// </summary>
        /// <value>Name of the EXIF profile used</value>
        [DataMember(Name="ExifProfileName", EmitDefaultValue=false)]
        public string ExifProfileName { get; set; }

        /// <summary>
        /// EXIF tags and values embedded in the image
        /// </summary>
        /// <value>EXIF tags and values embedded in the image</value>
        [DataMember(Name="ExifValues", EmitDefaultValue=false)]
        public List<ImageMetadataExifValue> ExifValues { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ImageMetadata {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  IsValidImage: ").Append(IsValidImage).Append("\n");
            sb.Append("  FileFormat: ").Append(FileFormat).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  BitDepth: ").Append(BitDepth).Append("\n");
            sb.Append("  HasTransparency: ").Append(HasTransparency).Append("\n");
            sb.Append("  ColorSpace: ").Append(ColorSpace).Append("\n");
            sb.Append("  ExifProfileName: ").Append(ExifProfileName).Append("\n");
            sb.Append("  ExifValues: ").Append(ExifValues).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ImageMetadata);
        }

        /// <summary>
        /// Returns true if ImageMetadata instances are equal
        /// </summary>
        /// <param name="input">Instance of ImageMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ImageMetadata input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.IsValidImage == input.IsValidImage ||
                    (this.IsValidImage != null &&
                    this.IsValidImage.Equals(input.IsValidImage))
                ) && 
                (
                    this.FileFormat == input.FileFormat ||
                    (this.FileFormat != null &&
                    this.FileFormat.Equals(input.FileFormat))
                ) && 
                (
                    this.Width == input.Width ||
                    (this.Width != null &&
                    this.Width.Equals(input.Width))
                ) && 
                (
                    this.Height == input.Height ||
                    (this.Height != null &&
                    this.Height.Equals(input.Height))
                ) && 
                (
                    this.BitDepth == input.BitDepth ||
                    (this.BitDepth != null &&
                    this.BitDepth.Equals(input.BitDepth))
                ) && 
                (
                    this.HasTransparency == input.HasTransparency ||
                    (this.HasTransparency != null &&
                    this.HasTransparency.Equals(input.HasTransparency))
                ) && 
                (
                    this.ColorSpace == input.ColorSpace ||
                    (this.ColorSpace != null &&
                    this.ColorSpace.Equals(input.ColorSpace))
                ) && 
                (
                    this.ExifProfileName == input.ExifProfileName ||
                    (this.ExifProfileName != null &&
                    this.ExifProfileName.Equals(input.ExifProfileName))
                ) && 
                (
                    this.ExifValues == input.ExifValues ||
                    this.ExifValues != null &&
                    this.ExifValues.SequenceEqual(input.ExifValues)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.IsValidImage != null)
                    hashCode = hashCode * 59 + this.IsValidImage.GetHashCode();
                if (this.FileFormat != null)
                    hashCode = hashCode * 59 + this.FileFormat.GetHashCode();
                if (this.Width != null)
                    hashCode = hashCode * 59 + this.Width.GetHashCode();
                if (this.Height != null)
                    hashCode = hashCode * 59 + this.Height.GetHashCode();
                if (this.BitDepth != null)
                    hashCode = hashCode * 59 + this.BitDepth.GetHashCode();
                if (this.HasTransparency != null)
                    hashCode = hashCode * 59 + this.HasTransparency.GetHashCode();
                if (this.ColorSpace != null)
                    hashCode = hashCode * 59 + this.ColorSpace.GetHashCode();
                if (this.ExifProfileName != null)
                    hashCode = hashCode * 59 + this.ExifProfileName.GetHashCode();
                if (this.ExifValues != null)
                    hashCode = hashCode * 59 + this.ExifValues.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
