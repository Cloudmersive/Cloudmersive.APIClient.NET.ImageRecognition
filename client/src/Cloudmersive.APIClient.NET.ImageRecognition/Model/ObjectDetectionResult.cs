/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Result of detecting objects in an image
    /// </summary>
    [DataContract]
    public partial class ObjectDetectionResult :  IEquatable<ObjectDetectionResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ObjectDetectionResult" /> class.
        /// </summary>
        /// <param name="successful">Was the image processed successfully?.</param>
        /// <param name="objects">Array of objects detected in the scene.</param>
        /// <param name="objectCount">Number of objects detected in the scene.</param>
        public ObjectDetectionResult(bool? successful = default(bool?), List<DetectedObject> objects = default(List<DetectedObject>), int? objectCount = default(int?))
        {
            this.Successful = successful;
            this.Objects = objects;
            this.ObjectCount = objectCount;
        }
        
        /// <summary>
        /// Was the image processed successfully?
        /// </summary>
        /// <value>Was the image processed successfully?</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Array of objects detected in the scene
        /// </summary>
        /// <value>Array of objects detected in the scene</value>
        [DataMember(Name="Objects", EmitDefaultValue=false)]
        public List<DetectedObject> Objects { get; set; }

        /// <summary>
        /// Number of objects detected in the scene
        /// </summary>
        /// <value>Number of objects detected in the scene</value>
        [DataMember(Name="ObjectCount", EmitDefaultValue=false)]
        public int? ObjectCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ObjectDetectionResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  Objects: ").Append(Objects).Append("\n");
            sb.Append("  ObjectCount: ").Append(ObjectCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as ObjectDetectionResult);
        }

        /// <summary>
        /// Returns true if ObjectDetectionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of ObjectDetectionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ObjectDetectionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.Objects == input.Objects ||
                    this.Objects != null &&
                    this.Objects.SequenceEqual(input.Objects)
                ) && 
                (
                    this.ObjectCount == input.ObjectCount ||
                    (this.ObjectCount != null &&
                    this.ObjectCount.Equals(input.ObjectCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.Objects != null)
                    hashCode = hashCode * 59 + this.Objects.GetHashCode();
                if (this.ObjectCount != null)
                    hashCode = hashCode * 59 + this.ObjectCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
