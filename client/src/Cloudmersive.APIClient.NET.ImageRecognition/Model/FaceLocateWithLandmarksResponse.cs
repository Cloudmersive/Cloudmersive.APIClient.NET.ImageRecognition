/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Results of locating faces in an image
    /// </summary>
    [DataContract]
    public partial class FaceLocateWithLandmarksResponse :  IEquatable<FaceLocateWithLandmarksResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FaceLocateWithLandmarksResponse" /> class.
        /// </summary>
        /// <param name="errorDetails">errorDetails.</param>
        /// <param name="successful">True if the operation was successful, false otherwise.</param>
        /// <param name="faces">Array of faces found in the image.</param>
        /// <param name="faceCount">Number of faces found in the image.</param>
        public FaceLocateWithLandmarksResponse(string errorDetails = default(string), bool? successful = default(bool?), List<FaceWithLandmarks> faces = default(List<FaceWithLandmarks>), int? faceCount = default(int?))
        {
            this.ErrorDetails = errorDetails;
            this.Successful = successful;
            this.Faces = faces;
            this.FaceCount = faceCount;
        }
        
        /// <summary>
        /// Gets or Sets ErrorDetails
        /// </summary>
        [DataMember(Name="ErrorDetails", EmitDefaultValue=false)]
        public string ErrorDetails { get; set; }

        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Array of faces found in the image
        /// </summary>
        /// <value>Array of faces found in the image</value>
        [DataMember(Name="Faces", EmitDefaultValue=false)]
        public List<FaceWithLandmarks> Faces { get; set; }

        /// <summary>
        /// Number of faces found in the image
        /// </summary>
        /// <value>Number of faces found in the image</value>
        [DataMember(Name="FaceCount", EmitDefaultValue=false)]
        public int? FaceCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FaceLocateWithLandmarksResponse {\n");
            sb.Append("  ErrorDetails: ").Append(ErrorDetails).Append("\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  Faces: ").Append(Faces).Append("\n");
            sb.Append("  FaceCount: ").Append(FaceCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as FaceLocateWithLandmarksResponse);
        }

        /// <summary>
        /// Returns true if FaceLocateWithLandmarksResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of FaceLocateWithLandmarksResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FaceLocateWithLandmarksResponse input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.ErrorDetails == input.ErrorDetails ||
                    (this.ErrorDetails != null &&
                    this.ErrorDetails.Equals(input.ErrorDetails))
                ) && 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.Faces == input.Faces ||
                    this.Faces != null &&
                    this.Faces.SequenceEqual(input.Faces)
                ) && 
                (
                    this.FaceCount == input.FaceCount ||
                    (this.FaceCount != null &&
                    this.FaceCount.Equals(input.FaceCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.ErrorDetails != null)
                    hashCode = hashCode * 59 + this.ErrorDetails.GetHashCode();
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.Faces != null)
                    hashCode = hashCode * 59 + this.Faces.GetHashCode();
                if (this.FaceCount != null)
                    hashCode = hashCode * 59 + this.FaceCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
