/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Location of one face in an image
    /// </summary>
    [DataContract]
    public partial class Face :  IEquatable<Face>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Face" /> class.
        /// </summary>
        /// <param name="leftX">X coordinate of the left side of the face.</param>
        /// <param name="topY">Y coordinate of the top side of the face.</param>
        /// <param name="rightX">X coordinate of the right side of the face.</param>
        /// <param name="bottomY">Y coordinate of the bottom side of the face.</param>
        public Face(int? leftX = default(int?), int? topY = default(int?), int? rightX = default(int?), int? bottomY = default(int?))
        {
            this.LeftX = leftX;
            this.TopY = topY;
            this.RightX = rightX;
            this.BottomY = bottomY;
        }
        
        /// <summary>
        /// X coordinate of the left side of the face
        /// </summary>
        /// <value>X coordinate of the left side of the face</value>
        [DataMember(Name="LeftX", EmitDefaultValue=false)]
        public int? LeftX { get; set; }

        /// <summary>
        /// Y coordinate of the top side of the face
        /// </summary>
        /// <value>Y coordinate of the top side of the face</value>
        [DataMember(Name="TopY", EmitDefaultValue=false)]
        public int? TopY { get; set; }

        /// <summary>
        /// X coordinate of the right side of the face
        /// </summary>
        /// <value>X coordinate of the right side of the face</value>
        [DataMember(Name="RightX", EmitDefaultValue=false)]
        public int? RightX { get; set; }

        /// <summary>
        /// Y coordinate of the bottom side of the face
        /// </summary>
        /// <value>Y coordinate of the bottom side of the face</value>
        [DataMember(Name="BottomY", EmitDefaultValue=false)]
        public int? BottomY { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Face {\n");
            sb.Append("  LeftX: ").Append(LeftX).Append("\n");
            sb.Append("  TopY: ").Append(TopY).Append("\n");
            sb.Append("  RightX: ").Append(RightX).Append("\n");
            sb.Append("  BottomY: ").Append(BottomY).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Face);
        }

        /// <summary>
        /// Returns true if Face instances are equal
        /// </summary>
        /// <param name="input">Instance of Face to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Face input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.LeftX == input.LeftX ||
                    (this.LeftX != null &&
                    this.LeftX.Equals(input.LeftX))
                ) && 
                (
                    this.TopY == input.TopY ||
                    (this.TopY != null &&
                    this.TopY.Equals(input.TopY))
                ) && 
                (
                    this.RightX == input.RightX ||
                    (this.RightX != null &&
                    this.RightX.Equals(input.RightX))
                ) && 
                (
                    this.BottomY == input.BottomY ||
                    (this.BottomY != null &&
                    this.BottomY.Equals(input.BottomY))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.LeftX != null)
                    hashCode = hashCode * 59 + this.LeftX.GetHashCode();
                if (this.TopY != null)
                    hashCode = hashCode * 59 + this.TopY.GetHashCode();
                if (this.RightX != null)
                    hashCode = hashCode * 59 + this.RightX.GetHashCode();
                if (this.BottomY != null)
                    hashCode = hashCode * 59 + this.BottomY.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
