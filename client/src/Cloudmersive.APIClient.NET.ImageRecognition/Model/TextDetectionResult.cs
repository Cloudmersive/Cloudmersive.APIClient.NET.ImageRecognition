/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// Result of an operation to detect text in a photo
    /// </summary>
    [DataContract]
    public partial class TextDetectionResult :  IEquatable<TextDetectionResult>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TextDetectionResult" /> class.
        /// </summary>
        /// <param name="successful">True if the operation was successful, false otherwise.</param>
        /// <param name="textItems">Text items found in the input image.</param>
        /// <param name="textItemsCount">Count of text items found in the input image.</param>
        public TextDetectionResult(bool? successful = default(bool?), List<TextItem> textItems = default(List<TextItem>), int? textItemsCount = default(int?))
        {
            this.Successful = successful;
            this.TextItems = textItems;
            this.TextItemsCount = textItemsCount;
        }
        
        /// <summary>
        /// True if the operation was successful, false otherwise
        /// </summary>
        /// <value>True if the operation was successful, false otherwise</value>
        [DataMember(Name="Successful", EmitDefaultValue=false)]
        public bool? Successful { get; set; }

        /// <summary>
        /// Text items found in the input image
        /// </summary>
        /// <value>Text items found in the input image</value>
        [DataMember(Name="TextItems", EmitDefaultValue=false)]
        public List<TextItem> TextItems { get; set; }

        /// <summary>
        /// Count of text items found in the input image
        /// </summary>
        /// <value>Count of text items found in the input image</value>
        [DataMember(Name="TextItemsCount", EmitDefaultValue=false)]
        public int? TextItemsCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TextDetectionResult {\n");
            sb.Append("  Successful: ").Append(Successful).Append("\n");
            sb.Append("  TextItems: ").Append(TextItems).Append("\n");
            sb.Append("  TextItemsCount: ").Append(TextItemsCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TextDetectionResult);
        }

        /// <summary>
        /// Returns true if TextDetectionResult instances are equal
        /// </summary>
        /// <param name="input">Instance of TextDetectionResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TextDetectionResult input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Successful == input.Successful ||
                    (this.Successful != null &&
                    this.Successful.Equals(input.Successful))
                ) && 
                (
                    this.TextItems == input.TextItems ||
                    this.TextItems != null &&
                    this.TextItems.SequenceEqual(input.TextItems)
                ) && 
                (
                    this.TextItemsCount == input.TextItemsCount ||
                    (this.TextItemsCount != null &&
                    this.TextItemsCount.Equals(input.TextItemsCount))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Successful != null)
                    hashCode = hashCode * 59 + this.Successful.GetHashCode();
                if (this.TextItems != null)
                    hashCode = hashCode * 59 + this.TextItems.GetHashCode();
                if (this.TextItemsCount != null)
                    hashCode = hashCode * 59 + this.TextItemsCount.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
