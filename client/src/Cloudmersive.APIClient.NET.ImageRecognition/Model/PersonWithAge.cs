/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = Cloudmersive.APIClient.NET.ImageRecognition.Client.SwaggerDateConverter;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Model
{
    /// <summary>
    /// A person identified in an image age classification operation
    /// </summary>
    [DataContract]
    public partial class PersonWithAge :  IEquatable<PersonWithAge>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="PersonWithAge" /> class.
        /// </summary>
        /// <param name="faceLocation">Location and other information about the person&#39;s face corresponding to this age classification.</param>
        /// <param name="ageClassificationConfidence">Confidence level of age classification; possible values are between 0.0 and 1.0; higher is better, with values &amp;gt; 0.50 being high confidence results.</param>
        /// <param name="ageClass">The person&#39;s age range classification result in years; possible values are \&quot;0-2\&quot;, \&quot;4-6\&quot;, \&quot;8-13\&quot;, \&quot;15-20\&quot;, \&quot;25-32\&quot;, \&quot;38-43\&quot;, \&quot;48-53\&quot;, \&quot;60+\&quot;.</param>
        /// <param name="age">The specific estimated age of the person.</param>
        /// <param name="genderClassification">Gender estimation classification as Female or Male.</param>
        /// <param name="genderFemaleConfidence">Confidence level of classification as female; possible values are between 0.0 and 1.0.</param>
        /// <param name="genderMaleConfidence">Confidence level of classification as male; possible values are between 0.0 and 1.0.</param>
        public PersonWithAge(Face faceLocation = default(Face), double? ageClassificationConfidence = default(double?), string ageClass = default(string), double? age = default(double?), string genderClassification = default(string), double? genderFemaleConfidence = default(double?), double? genderMaleConfidence = default(double?))
        {
            this.FaceLocation = faceLocation;
            this.AgeClassificationConfidence = ageClassificationConfidence;
            this.AgeClass = ageClass;
            this.Age = age;
            this.GenderClassification = genderClassification;
            this.GenderFemaleConfidence = genderFemaleConfidence;
            this.GenderMaleConfidence = genderMaleConfidence;
        }
        
        /// <summary>
        /// Location and other information about the person&#39;s face corresponding to this age classification
        /// </summary>
        /// <value>Location and other information about the person&#39;s face corresponding to this age classification</value>
        [DataMember(Name="FaceLocation", EmitDefaultValue=false)]
        public Face FaceLocation { get; set; }

        /// <summary>
        /// Confidence level of age classification; possible values are between 0.0 and 1.0; higher is better, with values &amp;gt; 0.50 being high confidence results
        /// </summary>
        /// <value>Confidence level of age classification; possible values are between 0.0 and 1.0; higher is better, with values &amp;gt; 0.50 being high confidence results</value>
        [DataMember(Name="AgeClassificationConfidence", EmitDefaultValue=false)]
        public double? AgeClassificationConfidence { get; set; }

        /// <summary>
        /// The person&#39;s age range classification result in years; possible values are \&quot;0-2\&quot;, \&quot;4-6\&quot;, \&quot;8-13\&quot;, \&quot;15-20\&quot;, \&quot;25-32\&quot;, \&quot;38-43\&quot;, \&quot;48-53\&quot;, \&quot;60+\&quot;
        /// </summary>
        /// <value>The person&#39;s age range classification result in years; possible values are \&quot;0-2\&quot;, \&quot;4-6\&quot;, \&quot;8-13\&quot;, \&quot;15-20\&quot;, \&quot;25-32\&quot;, \&quot;38-43\&quot;, \&quot;48-53\&quot;, \&quot;60+\&quot;</value>
        [DataMember(Name="AgeClass", EmitDefaultValue=false)]
        public string AgeClass { get; set; }

        /// <summary>
        /// The specific estimated age of the person
        /// </summary>
        /// <value>The specific estimated age of the person</value>
        [DataMember(Name="Age", EmitDefaultValue=false)]
        public double? Age { get; set; }

        /// <summary>
        /// Gender estimation classification as Female or Male
        /// </summary>
        /// <value>Gender estimation classification as Female or Male</value>
        [DataMember(Name="GenderClassification", EmitDefaultValue=false)]
        public string GenderClassification { get; set; }

        /// <summary>
        /// Confidence level of classification as female; possible values are between 0.0 and 1.0
        /// </summary>
        /// <value>Confidence level of classification as female; possible values are between 0.0 and 1.0</value>
        [DataMember(Name="GenderFemaleConfidence", EmitDefaultValue=false)]
        public double? GenderFemaleConfidence { get; set; }

        /// <summary>
        /// Confidence level of classification as male; possible values are between 0.0 and 1.0
        /// </summary>
        /// <value>Confidence level of classification as male; possible values are between 0.0 and 1.0</value>
        [DataMember(Name="GenderMaleConfidence", EmitDefaultValue=false)]
        public double? GenderMaleConfidence { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonWithAge {\n");
            sb.Append("  FaceLocation: ").Append(FaceLocation).Append("\n");
            sb.Append("  AgeClassificationConfidence: ").Append(AgeClassificationConfidence).Append("\n");
            sb.Append("  AgeClass: ").Append(AgeClass).Append("\n");
            sb.Append("  Age: ").Append(Age).Append("\n");
            sb.Append("  GenderClassification: ").Append(GenderClassification).Append("\n");
            sb.Append("  GenderFemaleConfidence: ").Append(GenderFemaleConfidence).Append("\n");
            sb.Append("  GenderMaleConfidence: ").Append(GenderMaleConfidence).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as PersonWithAge);
        }

        /// <summary>
        /// Returns true if PersonWithAge instances are equal
        /// </summary>
        /// <param name="input">Instance of PersonWithAge to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonWithAge input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.FaceLocation == input.FaceLocation ||
                    (this.FaceLocation != null &&
                    this.FaceLocation.Equals(input.FaceLocation))
                ) && 
                (
                    this.AgeClassificationConfidence == input.AgeClassificationConfidence ||
                    (this.AgeClassificationConfidence != null &&
                    this.AgeClassificationConfidence.Equals(input.AgeClassificationConfidence))
                ) && 
                (
                    this.AgeClass == input.AgeClass ||
                    (this.AgeClass != null &&
                    this.AgeClass.Equals(input.AgeClass))
                ) && 
                (
                    this.Age == input.Age ||
                    (this.Age != null &&
                    this.Age.Equals(input.Age))
                ) && 
                (
                    this.GenderClassification == input.GenderClassification ||
                    (this.GenderClassification != null &&
                    this.GenderClassification.Equals(input.GenderClassification))
                ) && 
                (
                    this.GenderFemaleConfidence == input.GenderFemaleConfidence ||
                    (this.GenderFemaleConfidence != null &&
                    this.GenderFemaleConfidence.Equals(input.GenderFemaleConfidence))
                ) && 
                (
                    this.GenderMaleConfidence == input.GenderMaleConfidence ||
                    (this.GenderMaleConfidence != null &&
                    this.GenderMaleConfidence.Equals(input.GenderMaleConfidence))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FaceLocation != null)
                    hashCode = hashCode * 59 + this.FaceLocation.GetHashCode();
                if (this.AgeClassificationConfidence != null)
                    hashCode = hashCode * 59 + this.AgeClassificationConfidence.GetHashCode();
                if (this.AgeClass != null)
                    hashCode = hashCode * 59 + this.AgeClass.GetHashCode();
                if (this.Age != null)
                    hashCode = hashCode * 59 + this.Age.GetHashCode();
                if (this.GenderClassification != null)
                    hashCode = hashCode * 59 + this.GenderClassification.GetHashCode();
                if (this.GenderFemaleConfidence != null)
                    hashCode = hashCode * 59 + this.GenderFemaleConfidence.GetHashCode();
                if (this.GenderMaleConfidence != null)
                    hashCode = hashCode * 59 + this.GenderMaleConfidence.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
