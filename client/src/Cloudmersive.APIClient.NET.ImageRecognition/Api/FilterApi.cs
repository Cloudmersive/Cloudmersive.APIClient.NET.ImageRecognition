/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.ImageRecognition.Client;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Convert image to black-and-white grayscale
        /// </summary>
        /// <remarks>
        /// Remove color from the image by converting to a grayscale, black-and-white image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] FilterBlackAndWhite (System.IO.Stream imageFile);

        /// <summary>
        /// Convert image to black-and-white grayscale
        /// </summary>
        /// <remarks>
        /// Remove color from the image by converting to a grayscale, black-and-white image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> FilterBlackAndWhiteWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Despeckle (remove point noise) from the image
        /// </summary>
        /// <remarks>
        /// Remove point noise / despeckle the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] FilterDespeckle (System.IO.Stream imageFile);

        /// <summary>
        /// Despeckle (remove point noise) from the image
        /// </summary>
        /// <remarks>
        /// Remove point noise / despeckle the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> FilterDespeckleWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Detect and highlight edges in an image
        /// </summary>
        /// <remarks>
        /// Perform an edge detection operation on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the edge detection operation; a larger radius will produce a greater effect</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] FilterEdgeDetect (int? radius, System.IO.Stream imageFile);

        /// <summary>
        /// Detect and highlight edges in an image
        /// </summary>
        /// <remarks>
        /// Perform an edge detection operation on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the edge detection operation; a larger radius will produce a greater effect</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> FilterEdgeDetectWithHttpInfo (int? radius, System.IO.Stream imageFile);
        /// <summary>
        /// Emboss an image
        /// </summary>
        /// <remarks>
        /// Perform an emboss operation on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the emboss operation; a larger radius will produce a greater effect</param>
        /// <param name="sigma">Sigma, or variance, of the emboss operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] FilterEmboss (int? radius, int? sigma, System.IO.Stream imageFile);

        /// <summary>
        /// Emboss an image
        /// </summary>
        /// <remarks>
        /// Perform an emboss operation on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the emboss operation; a larger radius will produce a greater effect</param>
        /// <param name="sigma">Sigma, or variance, of the emboss operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> FilterEmbossWithHttpInfo (int? radius, int? sigma, System.IO.Stream imageFile);
        /// <summary>
        /// Perform a guassian blur on the input image
        /// </summary>
        /// <remarks>
        /// Perform a gaussian blur on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the gaussian blur operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] FilterGaussianBlur (int? radius, int? sigma, System.IO.Stream imageFile);

        /// <summary>
        /// Perform a guassian blur on the input image
        /// </summary>
        /// <remarks>
        /// Perform a gaussian blur on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the gaussian blur operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> FilterGaussianBlurWithHttpInfo (int? radius, int? sigma, System.IO.Stream imageFile);
        /// <summary>
        /// Perform a motion blur on the input image
        /// </summary>
        /// <remarks>
        /// Perform a motion blur on the input image at a specific angle
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the motion blur operation</param>
        /// <param name="angle">Angle of the motion blur in degrees</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] FilterMotionBlur (int? radius, int? sigma, int? angle, System.IO.Stream imageFile);

        /// <summary>
        /// Perform a motion blur on the input image
        /// </summary>
        /// <remarks>
        /// Perform a motion blur on the input image at a specific angle
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the motion blur operation</param>
        /// <param name="angle">Angle of the motion blur in degrees</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> FilterMotionBlurWithHttpInfo (int? radius, int? sigma, int? angle, System.IO.Stream imageFile);
        /// <summary>
        /// Posterize the image by reducing distinct colors
        /// </summary>
        /// <remarks>
        /// Reduce the unique number of colors in the image to the specified level
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levels">Number of unique colors to retain in the output image</param>
        /// <returns>Object</returns>
        Object FilterPosterize (int? levels);

        /// <summary>
        /// Posterize the image by reducing distinct colors
        /// </summary>
        /// <remarks>
        /// Reduce the unique number of colors in the image to the specified level
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levels">Number of unique colors to retain in the output image</param>
        /// <returns>ApiResponse of Object</returns>
        ApiResponse<Object> FilterPosterizeWithHttpInfo (int? levels);
        /// <summary>
        /// Swirl distort the image
        /// </summary>
        /// <remarks>
        /// Swirl distort the image by the specified number of degrees
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees of swirl</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] FilterSwirl (int? degrees, System.IO.Stream imageFile);

        /// <summary>
        /// Swirl distort the image
        /// </summary>
        /// <remarks>
        /// Swirl distort the image by the specified number of degrees
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees of swirl</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> FilterSwirlWithHttpInfo (int? degrees, System.IO.Stream imageFile);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Convert image to black-and-white grayscale
        /// </summary>
        /// <remarks>
        /// Remove color from the image by converting to a grayscale, black-and-white image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> FilterBlackAndWhiteAsync (System.IO.Stream imageFile);

        /// <summary>
        /// Convert image to black-and-white grayscale
        /// </summary>
        /// <remarks>
        /// Remove color from the image by converting to a grayscale, black-and-white image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterBlackAndWhiteAsyncWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Despeckle (remove point noise) from the image
        /// </summary>
        /// <remarks>
        /// Remove point noise / despeckle the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> FilterDespeckleAsync (System.IO.Stream imageFile);

        /// <summary>
        /// Despeckle (remove point noise) from the image
        /// </summary>
        /// <remarks>
        /// Remove point noise / despeckle the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterDespeckleAsyncWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Detect and highlight edges in an image
        /// </summary>
        /// <remarks>
        /// Perform an edge detection operation on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the edge detection operation; a larger radius will produce a greater effect</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> FilterEdgeDetectAsync (int? radius, System.IO.Stream imageFile);

        /// <summary>
        /// Detect and highlight edges in an image
        /// </summary>
        /// <remarks>
        /// Perform an edge detection operation on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the edge detection operation; a larger radius will produce a greater effect</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterEdgeDetectAsyncWithHttpInfo (int? radius, System.IO.Stream imageFile);
        /// <summary>
        /// Emboss an image
        /// </summary>
        /// <remarks>
        /// Perform an emboss operation on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the emboss operation; a larger radius will produce a greater effect</param>
        /// <param name="sigma">Sigma, or variance, of the emboss operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> FilterEmbossAsync (int? radius, int? sigma, System.IO.Stream imageFile);

        /// <summary>
        /// Emboss an image
        /// </summary>
        /// <remarks>
        /// Perform an emboss operation on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the emboss operation; a larger radius will produce a greater effect</param>
        /// <param name="sigma">Sigma, or variance, of the emboss operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterEmbossAsyncWithHttpInfo (int? radius, int? sigma, System.IO.Stream imageFile);
        /// <summary>
        /// Perform a guassian blur on the input image
        /// </summary>
        /// <remarks>
        /// Perform a gaussian blur on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the gaussian blur operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> FilterGaussianBlurAsync (int? radius, int? sigma, System.IO.Stream imageFile);

        /// <summary>
        /// Perform a guassian blur on the input image
        /// </summary>
        /// <remarks>
        /// Perform a gaussian blur on the input image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the gaussian blur operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterGaussianBlurAsyncWithHttpInfo (int? radius, int? sigma, System.IO.Stream imageFile);
        /// <summary>
        /// Perform a motion blur on the input image
        /// </summary>
        /// <remarks>
        /// Perform a motion blur on the input image at a specific angle
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the motion blur operation</param>
        /// <param name="angle">Angle of the motion blur in degrees</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> FilterMotionBlurAsync (int? radius, int? sigma, int? angle, System.IO.Stream imageFile);

        /// <summary>
        /// Perform a motion blur on the input image
        /// </summary>
        /// <remarks>
        /// Perform a motion blur on the input image at a specific angle
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the motion blur operation</param>
        /// <param name="angle">Angle of the motion blur in degrees</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterMotionBlurAsyncWithHttpInfo (int? radius, int? sigma, int? angle, System.IO.Stream imageFile);
        /// <summary>
        /// Posterize the image by reducing distinct colors
        /// </summary>
        /// <remarks>
        /// Reduce the unique number of colors in the image to the specified level
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levels">Number of unique colors to retain in the output image</param>
        /// <returns>Task of Object</returns>
        System.Threading.Tasks.Task<Object> FilterPosterizeAsync (int? levels);

        /// <summary>
        /// Posterize the image by reducing distinct colors
        /// </summary>
        /// <remarks>
        /// Reduce the unique number of colors in the image to the specified level
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levels">Number of unique colors to retain in the output image</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        System.Threading.Tasks.Task<ApiResponse<Object>> FilterPosterizeAsyncWithHttpInfo (int? levels);
        /// <summary>
        /// Swirl distort the image
        /// </summary>
        /// <remarks>
        /// Swirl distort the image by the specified number of degrees
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees of swirl</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> FilterSwirlAsync (int? degrees, System.IO.Stream imageFile);

        /// <summary>
        /// Swirl distort the image
        /// </summary>
        /// <remarks>
        /// Swirl distort the image by the specified number of degrees
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees of swirl</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterSwirlAsyncWithHttpInfo (int? degrees, System.IO.Stream imageFile);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class FilterApi : IFilterApi
    {
        private Cloudmersive.APIClient.NET.ImageRecognition.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="FilterApi"/> class.
        /// </summary>
        /// <returns></returns>
        public FilterApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="FilterApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilterApi(Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.ImageRecognition.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Convert image to black-and-white grayscale Remove color from the image by converting to a grayscale, black-and-white image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] FilterBlackAndWhite (System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = FilterBlackAndWhiteWithHttpInfo(imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Convert image to black-and-white grayscale Remove color from the image by converting to a grayscale, black-and-white image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > FilterBlackAndWhiteWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterBlackAndWhite");

            var localVarPath = "/image/filter/black-and-white";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterBlackAndWhite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Convert image to black-and-white grayscale Remove color from the image by converting to a grayscale, black-and-white image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> FilterBlackAndWhiteAsync (System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await FilterBlackAndWhiteAsyncWithHttpInfo(imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Convert image to black-and-white grayscale Remove color from the image by converting to a grayscale, black-and-white image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterBlackAndWhiteAsyncWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterBlackAndWhite");

            var localVarPath = "/image/filter/black-and-white";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterBlackAndWhite", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Despeckle (remove point noise) from the image Remove point noise / despeckle the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] FilterDespeckle (System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = FilterDespeckleWithHttpInfo(imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Despeckle (remove point noise) from the image Remove point noise / despeckle the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > FilterDespeckleWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterDespeckle");

            var localVarPath = "/image/filter/despeckle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterDespeckle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Despeckle (remove point noise) from the image Remove point noise / despeckle the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> FilterDespeckleAsync (System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await FilterDespeckleAsyncWithHttpInfo(imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Despeckle (remove point noise) from the image Remove point noise / despeckle the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterDespeckleAsyncWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterDespeckle");

            var localVarPath = "/image/filter/despeckle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterDespeckle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Detect and highlight edges in an image Perform an edge detection operation on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the edge detection operation; a larger radius will produce a greater effect</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] FilterEdgeDetect (int? radius, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = FilterEdgeDetectWithHttpInfo(radius, imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Detect and highlight edges in an image Perform an edge detection operation on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the edge detection operation; a larger radius will produce a greater effect</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > FilterEdgeDetectWithHttpInfo (int? radius, System.IO.Stream imageFile)
        {
            // verify the required parameter 'radius' is set
            if (radius == null)
                throw new ApiException(400, "Missing required parameter 'radius' when calling FilterApi->FilterEdgeDetect");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterEdgeDetect");

            var localVarPath = "/image/filter/edge-detect/{radius}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (radius != null) localVarPathParams.Add("radius", this.Configuration.ApiClient.ParameterToString(radius)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterEdgeDetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Detect and highlight edges in an image Perform an edge detection operation on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the edge detection operation; a larger radius will produce a greater effect</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> FilterEdgeDetectAsync (int? radius, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await FilterEdgeDetectAsyncWithHttpInfo(radius, imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Detect and highlight edges in an image Perform an edge detection operation on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the edge detection operation; a larger radius will produce a greater effect</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterEdgeDetectAsyncWithHttpInfo (int? radius, System.IO.Stream imageFile)
        {
            // verify the required parameter 'radius' is set
            if (radius == null)
                throw new ApiException(400, "Missing required parameter 'radius' when calling FilterApi->FilterEdgeDetect");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterEdgeDetect");

            var localVarPath = "/image/filter/edge-detect/{radius}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (radius != null) localVarPathParams.Add("radius", this.Configuration.ApiClient.ParameterToString(radius)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterEdgeDetect", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Emboss an image Perform an emboss operation on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the emboss operation; a larger radius will produce a greater effect</param>
        /// <param name="sigma">Sigma, or variance, of the emboss operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] FilterEmboss (int? radius, int? sigma, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = FilterEmbossWithHttpInfo(radius, sigma, imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Emboss an image Perform an emboss operation on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the emboss operation; a larger radius will produce a greater effect</param>
        /// <param name="sigma">Sigma, or variance, of the emboss operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > FilterEmbossWithHttpInfo (int? radius, int? sigma, System.IO.Stream imageFile)
        {
            // verify the required parameter 'radius' is set
            if (radius == null)
                throw new ApiException(400, "Missing required parameter 'radius' when calling FilterApi->FilterEmboss");
            // verify the required parameter 'sigma' is set
            if (sigma == null)
                throw new ApiException(400, "Missing required parameter 'sigma' when calling FilterApi->FilterEmboss");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterEmboss");

            var localVarPath = "/image/filter/emboss/{radius}/{sigma}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (radius != null) localVarPathParams.Add("radius", this.Configuration.ApiClient.ParameterToString(radius)); // path parameter
            if (sigma != null) localVarPathParams.Add("sigma", this.Configuration.ApiClient.ParameterToString(sigma)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterEmboss", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Emboss an image Perform an emboss operation on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the emboss operation; a larger radius will produce a greater effect</param>
        /// <param name="sigma">Sigma, or variance, of the emboss operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> FilterEmbossAsync (int? radius, int? sigma, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await FilterEmbossAsyncWithHttpInfo(radius, sigma, imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Emboss an image Perform an emboss operation on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the emboss operation; a larger radius will produce a greater effect</param>
        /// <param name="sigma">Sigma, or variance, of the emboss operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterEmbossAsyncWithHttpInfo (int? radius, int? sigma, System.IO.Stream imageFile)
        {
            // verify the required parameter 'radius' is set
            if (radius == null)
                throw new ApiException(400, "Missing required parameter 'radius' when calling FilterApi->FilterEmboss");
            // verify the required parameter 'sigma' is set
            if (sigma == null)
                throw new ApiException(400, "Missing required parameter 'sigma' when calling FilterApi->FilterEmboss");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterEmboss");

            var localVarPath = "/image/filter/emboss/{radius}/{sigma}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (radius != null) localVarPathParams.Add("radius", this.Configuration.ApiClient.ParameterToString(radius)); // path parameter
            if (sigma != null) localVarPathParams.Add("sigma", this.Configuration.ApiClient.ParameterToString(sigma)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterEmboss", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Perform a guassian blur on the input image Perform a gaussian blur on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the gaussian blur operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] FilterGaussianBlur (int? radius, int? sigma, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = FilterGaussianBlurWithHttpInfo(radius, sigma, imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a guassian blur on the input image Perform a gaussian blur on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the gaussian blur operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > FilterGaussianBlurWithHttpInfo (int? radius, int? sigma, System.IO.Stream imageFile)
        {
            // verify the required parameter 'radius' is set
            if (radius == null)
                throw new ApiException(400, "Missing required parameter 'radius' when calling FilterApi->FilterGaussianBlur");
            // verify the required parameter 'sigma' is set
            if (sigma == null)
                throw new ApiException(400, "Missing required parameter 'sigma' when calling FilterApi->FilterGaussianBlur");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterGaussianBlur");

            var localVarPath = "/image/filter/blur/guassian/{radius}/{sigma}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (radius != null) localVarPathParams.Add("radius", this.Configuration.ApiClient.ParameterToString(radius)); // path parameter
            if (sigma != null) localVarPathParams.Add("sigma", this.Configuration.ApiClient.ParameterToString(sigma)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterGaussianBlur", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Perform a guassian blur on the input image Perform a gaussian blur on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the gaussian blur operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> FilterGaussianBlurAsync (int? radius, int? sigma, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await FilterGaussianBlurAsyncWithHttpInfo(radius, sigma, imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform a guassian blur on the input image Perform a gaussian blur on the input image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the gaussian blur operation</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterGaussianBlurAsyncWithHttpInfo (int? radius, int? sigma, System.IO.Stream imageFile)
        {
            // verify the required parameter 'radius' is set
            if (radius == null)
                throw new ApiException(400, "Missing required parameter 'radius' when calling FilterApi->FilterGaussianBlur");
            // verify the required parameter 'sigma' is set
            if (sigma == null)
                throw new ApiException(400, "Missing required parameter 'sigma' when calling FilterApi->FilterGaussianBlur");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterGaussianBlur");

            var localVarPath = "/image/filter/blur/guassian/{radius}/{sigma}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (radius != null) localVarPathParams.Add("radius", this.Configuration.ApiClient.ParameterToString(radius)); // path parameter
            if (sigma != null) localVarPathParams.Add("sigma", this.Configuration.ApiClient.ParameterToString(sigma)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterGaussianBlur", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Perform a motion blur on the input image Perform a motion blur on the input image at a specific angle
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the motion blur operation</param>
        /// <param name="angle">Angle of the motion blur in degrees</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] FilterMotionBlur (int? radius, int? sigma, int? angle, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = FilterMotionBlurWithHttpInfo(radius, sigma, angle, imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Perform a motion blur on the input image Perform a motion blur on the input image at a specific angle
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the motion blur operation</param>
        /// <param name="angle">Angle of the motion blur in degrees</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > FilterMotionBlurWithHttpInfo (int? radius, int? sigma, int? angle, System.IO.Stream imageFile)
        {
            // verify the required parameter 'radius' is set
            if (radius == null)
                throw new ApiException(400, "Missing required parameter 'radius' when calling FilterApi->FilterMotionBlur");
            // verify the required parameter 'sigma' is set
            if (sigma == null)
                throw new ApiException(400, "Missing required parameter 'sigma' when calling FilterApi->FilterMotionBlur");
            // verify the required parameter 'angle' is set
            if (angle == null)
                throw new ApiException(400, "Missing required parameter 'angle' when calling FilterApi->FilterMotionBlur");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterMotionBlur");

            var localVarPath = "/image/filter/blur/motion/{radius}/{sigma}/{angle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (radius != null) localVarPathParams.Add("radius", this.Configuration.ApiClient.ParameterToString(radius)); // path parameter
            if (sigma != null) localVarPathParams.Add("sigma", this.Configuration.ApiClient.ParameterToString(sigma)); // path parameter
            if (angle != null) localVarPathParams.Add("angle", this.Configuration.ApiClient.ParameterToString(angle)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterMotionBlur", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Perform a motion blur on the input image Perform a motion blur on the input image at a specific angle
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the motion blur operation</param>
        /// <param name="angle">Angle of the motion blur in degrees</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> FilterMotionBlurAsync (int? radius, int? sigma, int? angle, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await FilterMotionBlurAsyncWithHttpInfo(radius, sigma, angle, imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Perform a motion blur on the input image Perform a motion blur on the input image at a specific angle
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="radius">Radius in pixels of the blur operation; a larger radius will produce a greater blur effect</param>
        /// <param name="sigma">Sigma, or variance, of the motion blur operation</param>
        /// <param name="angle">Angle of the motion blur in degrees</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterMotionBlurAsyncWithHttpInfo (int? radius, int? sigma, int? angle, System.IO.Stream imageFile)
        {
            // verify the required parameter 'radius' is set
            if (radius == null)
                throw new ApiException(400, "Missing required parameter 'radius' when calling FilterApi->FilterMotionBlur");
            // verify the required parameter 'sigma' is set
            if (sigma == null)
                throw new ApiException(400, "Missing required parameter 'sigma' when calling FilterApi->FilterMotionBlur");
            // verify the required parameter 'angle' is set
            if (angle == null)
                throw new ApiException(400, "Missing required parameter 'angle' when calling FilterApi->FilterMotionBlur");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterMotionBlur");

            var localVarPath = "/image/filter/blur/motion/{radius}/{sigma}/{angle}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (radius != null) localVarPathParams.Add("radius", this.Configuration.ApiClient.ParameterToString(radius)); // path parameter
            if (sigma != null) localVarPathParams.Add("sigma", this.Configuration.ApiClient.ParameterToString(sigma)); // path parameter
            if (angle != null) localVarPathParams.Add("angle", this.Configuration.ApiClient.ParameterToString(angle)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterMotionBlur", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Posterize the image by reducing distinct colors Reduce the unique number of colors in the image to the specified level
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levels">Number of unique colors to retain in the output image</param>
        /// <returns>Object</returns>
        public Object FilterPosterize (int? levels)
        {
             ApiResponse<Object> localVarResponse = FilterPosterizeWithHttpInfo(levels);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Posterize the image by reducing distinct colors Reduce the unique number of colors in the image to the specified level
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levels">Number of unique colors to retain in the output image</param>
        /// <returns>ApiResponse of Object</returns>
        public ApiResponse< Object > FilterPosterizeWithHttpInfo (int? levels)
        {
            // verify the required parameter 'levels' is set
            if (levels == null)
                throw new ApiException(400, "Missing required parameter 'levels' when calling FilterApi->FilterPosterize");

            var localVarPath = "/image/filter/posterize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (levels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "levels", levels)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterPosterize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Posterize the image by reducing distinct colors Reduce the unique number of colors in the image to the specified level
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levels">Number of unique colors to retain in the output image</param>
        /// <returns>Task of Object</returns>
        public async System.Threading.Tasks.Task<Object> FilterPosterizeAsync (int? levels)
        {
             ApiResponse<Object> localVarResponse = await FilterPosterizeAsyncWithHttpInfo(levels);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Posterize the image by reducing distinct colors Reduce the unique number of colors in the image to the specified level
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="levels">Number of unique colors to retain in the output image</param>
        /// <returns>Task of ApiResponse (Object)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<Object>> FilterPosterizeAsyncWithHttpInfo (int? levels)
        {
            // verify the required parameter 'levels' is set
            if (levels == null)
                throw new ApiException(400, "Missing required parameter 'levels' when calling FilterApi->FilterPosterize");

            var localVarPath = "/image/filter/posterize";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (levels != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "levels", levels)); // query parameter

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterPosterize", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<Object>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (Object) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(Object)));
        }

        /// <summary>
        /// Swirl distort the image Swirl distort the image by the specified number of degrees
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees of swirl</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] FilterSwirl (int? degrees, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = FilterSwirlWithHttpInfo(degrees, imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Swirl distort the image Swirl distort the image by the specified number of degrees
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees of swirl</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > FilterSwirlWithHttpInfo (int? degrees, System.IO.Stream imageFile)
        {
            // verify the required parameter 'degrees' is set
            if (degrees == null)
                throw new ApiException(400, "Missing required parameter 'degrees' when calling FilterApi->FilterSwirl");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterSwirl");

            var localVarPath = "/image/filter/swirl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (degrees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "degrees", degrees)); // query parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterSwirl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Swirl distort the image Swirl distort the image by the specified number of degrees
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees of swirl</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> FilterSwirlAsync (int? degrees, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await FilterSwirlAsyncWithHttpInfo(degrees, imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Swirl distort the image Swirl distort the image by the specified number of degrees
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees of swirl</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> FilterSwirlAsyncWithHttpInfo (int? degrees, System.IO.Stream imageFile)
        {
            // verify the required parameter 'degrees' is set
            if (degrees == null)
                throw new ApiException(400, "Missing required parameter 'degrees' when calling FilterApi->FilterSwirl");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling FilterApi->FilterSwirl");

            var localVarPath = "/image/filter/swirl";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (degrees != null) localVarQueryParams.AddRange(this.Configuration.ApiClient.ParameterToKeyValuePairs("", "degrees", degrees)); // query parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterSwirl", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
