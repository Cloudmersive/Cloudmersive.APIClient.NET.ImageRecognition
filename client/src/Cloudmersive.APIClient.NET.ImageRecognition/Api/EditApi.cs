/* 
 * imageapi
 *
 * Image Recognition and Processing APIs let you use Machine Learning to recognize and process images, and also perform useful image modification operations.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Cloudmersive.APIClient.NET.ImageRecognition.Client;
using Cloudmersive.APIClient.NET.ImageRecognition.Model;

namespace Cloudmersive.APIClient.NET.ImageRecognition.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IEditApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Normalizes image rotation and removes EXIF rotation data
        /// </summary>
        /// <remarks>
        /// Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] EditAutoOrient (System.IO.Stream imageFile);

        /// <summary>
        /// Normalizes image rotation and removes EXIF rotation data
        /// </summary>
        /// <remarks>
        /// Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditAutoOrientWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Composite two images together
        /// </summary>
        /// <remarks>
        /// Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;</param>
        /// <param name="baseImage">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <param name="layeredImage">Image to layer on top of the base image.</param>
        /// <returns>byte[]</returns>
        byte[] EditCompositeBasic (string location, System.IO.Stream baseImage, System.IO.Stream layeredImage);

        /// <summary>
        /// Composite two images together
        /// </summary>
        /// <remarks>
        /// Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;</param>
        /// <param name="baseImage">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <param name="layeredImage">Image to layer on top of the base image.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditCompositeBasicWithHttpInfo (string location, System.IO.Stream baseImage, System.IO.Stream layeredImage);
        /// <summary>
        /// Adaptively adjust the contrast of the image to be more appealing and easy to see
        /// </summary>
        /// <remarks>
        /// Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamma">Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] EditContrastAdaptive (double? gamma, System.IO.Stream imageFile);

        /// <summary>
        /// Adaptively adjust the contrast of the image to be more appealing and easy to see
        /// </summary>
        /// <remarks>
        /// Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamma">Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditContrastAdaptiveWithHttpInfo (double? gamma, System.IO.Stream imageFile);
        /// <summary>
        /// Crop an image to a rectangular area
        /// </summary>
        /// <remarks>
        /// Crop an image to a target rectangular area
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="left">The left edge of the rectangular crop area in pixels (X).</param>
        /// <param name="top">The top edge of the rectangular crop area in pixels (Y).</param>
        /// <param name="width">The width of the rectangular crop area in pixels.</param>
        /// <param name="height">The height of the rectangular crop area in pixels.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] EditCropRectangle (int? left, int? top, int? width, int? height, System.IO.Stream imageFile);

        /// <summary>
        /// Crop an image to a rectangular area
        /// </summary>
        /// <remarks>
        /// Crop an image to a target rectangular area
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="left">The left edge of the rectangular crop area in pixels (X).</param>
        /// <param name="top">The top edge of the rectangular crop area in pixels (Y).</param>
        /// <param name="width">The width of the rectangular crop area in pixels.</param>
        /// <param name="height">The height of the rectangular crop area in pixels.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditCropRectangleWithHttpInfo (int? left, int? top, int? width, int? height, System.IO.Stream imageFile);
        /// <summary>
        /// Draw a polygon onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more polygons, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>byte[]</returns>
        byte[] EditDrawPolygon (DrawPolygonRequest request);

        /// <summary>
        /// Draw a polygon onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more polygons, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDrawPolygonWithHttpInfo (DrawPolygonRequest request);
        /// <summary>
        /// Draw a rectangle onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more rectangles, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>byte[]</returns>
        byte[] EditDrawRectangle (DrawRectangleRequest request);

        /// <summary>
        /// Draw a rectangle onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more rectangles, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDrawRectangleWithHttpInfo (DrawRectangleRequest request);
        /// <summary>
        /// Draw text onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more pieces of text, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>byte[]</returns>
        byte[] EditDrawText (DrawTextRequest request);

        /// <summary>
        /// Draw text onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more pieces of text, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDrawTextWithHttpInfo (DrawTextRequest request);
        /// <summary>
        /// Add a customizeable drop shadow to an image
        /// </summary>
        /// <remarks>
        /// Add a customizeable drop shadow to the image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="sigma">Sigma (blur distance) of the drop shadow</param>
        /// <param name="opacity">Opacity of the drop shadow; 0 is 0% and 100 is 100%</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] EditDropShadow (int? X, int? Y, int? sigma, int? opacity, System.IO.Stream imageFile);

        /// <summary>
        /// Add a customizeable drop shadow to an image
        /// </summary>
        /// <remarks>
        /// Add a customizeable drop shadow to the image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="sigma">Sigma (blur distance) of the drop shadow</param>
        /// <param name="opacity">Opacity of the drop shadow; 0 is 0% and 100 is 100%</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditDropShadowWithHttpInfo (int? X, int? Y, int? sigma, int? opacity, System.IO.Stream imageFile);
        /// <summary>
        /// Rotate an image any number of degrees
        /// </summary>
        /// <remarks>
        /// Rotates an image by an arbitrary number of degrees
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees to rotate the image; values range from 0.0 to 360.0.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        byte[] EditRotate (double? degrees, System.IO.Stream imageFile);

        /// <summary>
        /// Rotate an image any number of degrees
        /// </summary>
        /// <remarks>
        /// Rotates an image by an arbitrary number of degrees
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees to rotate the image; values range from 0.0 to 360.0.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        ApiResponse<byte[]> EditRotateWithHttpInfo (double? degrees, System.IO.Stream imageFile);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Normalizes image rotation and removes EXIF rotation data
        /// </summary>
        /// <remarks>
        /// Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditAutoOrientAsync (System.IO.Stream imageFile);

        /// <summary>
        /// Normalizes image rotation and removes EXIF rotation data
        /// </summary>
        /// <remarks>
        /// Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditAutoOrientAsyncWithHttpInfo (System.IO.Stream imageFile);
        /// <summary>
        /// Composite two images together
        /// </summary>
        /// <remarks>
        /// Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;</param>
        /// <param name="baseImage">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <param name="layeredImage">Image to layer on top of the base image.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditCompositeBasicAsync (string location, System.IO.Stream baseImage, System.IO.Stream layeredImage);

        /// <summary>
        /// Composite two images together
        /// </summary>
        /// <remarks>
        /// Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;</param>
        /// <param name="baseImage">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <param name="layeredImage">Image to layer on top of the base image.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditCompositeBasicAsyncWithHttpInfo (string location, System.IO.Stream baseImage, System.IO.Stream layeredImage);
        /// <summary>
        /// Adaptively adjust the contrast of the image to be more appealing and easy to see
        /// </summary>
        /// <remarks>
        /// Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamma">Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditContrastAdaptiveAsync (double? gamma, System.IO.Stream imageFile);

        /// <summary>
        /// Adaptively adjust the contrast of the image to be more appealing and easy to see
        /// </summary>
        /// <remarks>
        /// Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamma">Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditContrastAdaptiveAsyncWithHttpInfo (double? gamma, System.IO.Stream imageFile);
        /// <summary>
        /// Crop an image to a rectangular area
        /// </summary>
        /// <remarks>
        /// Crop an image to a target rectangular area
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="left">The left edge of the rectangular crop area in pixels (X).</param>
        /// <param name="top">The top edge of the rectangular crop area in pixels (Y).</param>
        /// <param name="width">The width of the rectangular crop area in pixels.</param>
        /// <param name="height">The height of the rectangular crop area in pixels.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditCropRectangleAsync (int? left, int? top, int? width, int? height, System.IO.Stream imageFile);

        /// <summary>
        /// Crop an image to a rectangular area
        /// </summary>
        /// <remarks>
        /// Crop an image to a target rectangular area
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="left">The left edge of the rectangular crop area in pixels (X).</param>
        /// <param name="top">The top edge of the rectangular crop area in pixels (Y).</param>
        /// <param name="width">The width of the rectangular crop area in pixels.</param>
        /// <param name="height">The height of the rectangular crop area in pixels.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditCropRectangleAsyncWithHttpInfo (int? left, int? top, int? width, int? height, System.IO.Stream imageFile);
        /// <summary>
        /// Draw a polygon onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more polygons, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDrawPolygonAsync (DrawPolygonRequest request);

        /// <summary>
        /// Draw a polygon onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more polygons, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDrawPolygonAsyncWithHttpInfo (DrawPolygonRequest request);
        /// <summary>
        /// Draw a rectangle onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more rectangles, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDrawRectangleAsync (DrawRectangleRequest request);

        /// <summary>
        /// Draw a rectangle onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more rectangles, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDrawRectangleAsyncWithHttpInfo (DrawRectangleRequest request);
        /// <summary>
        /// Draw text onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more pieces of text, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDrawTextAsync (DrawTextRequest request);

        /// <summary>
        /// Draw text onto an image
        /// </summary>
        /// <remarks>
        /// Draw one or more pieces of text, with customized visuals, onto an image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDrawTextAsyncWithHttpInfo (DrawTextRequest request);
        /// <summary>
        /// Add a customizeable drop shadow to an image
        /// </summary>
        /// <remarks>
        /// Add a customizeable drop shadow to the image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="sigma">Sigma (blur distance) of the drop shadow</param>
        /// <param name="opacity">Opacity of the drop shadow; 0 is 0% and 100 is 100%</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditDropShadowAsync (int? X, int? Y, int? sigma, int? opacity, System.IO.Stream imageFile);

        /// <summary>
        /// Add a customizeable drop shadow to an image
        /// </summary>
        /// <remarks>
        /// Add a customizeable drop shadow to the image
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="sigma">Sigma (blur distance) of the drop shadow</param>
        /// <param name="opacity">Opacity of the drop shadow; 0 is 0% and 100 is 100%</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDropShadowAsyncWithHttpInfo (int? X, int? Y, int? sigma, int? opacity, System.IO.Stream imageFile);
        /// <summary>
        /// Rotate an image any number of degrees
        /// </summary>
        /// <remarks>
        /// Rotates an image by an arbitrary number of degrees
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees to rotate the image; values range from 0.0 to 360.0.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        System.Threading.Tasks.Task<byte[]> EditRotateAsync (double? degrees, System.IO.Stream imageFile);

        /// <summary>
        /// Rotate an image any number of degrees
        /// </summary>
        /// <remarks>
        /// Rotates an image by an arbitrary number of degrees
        /// </remarks>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees to rotate the image; values range from 0.0 to 360.0.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        System.Threading.Tasks.Task<ApiResponse<byte[]>> EditRotateAsyncWithHttpInfo (double? degrees, System.IO.Stream imageFile);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class EditApi : IEditApi
    {
        private Cloudmersive.APIClient.NET.ImageRecognition.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="EditApi"/> class.
        /// </summary>
        /// <returns></returns>
        public EditApi(String basePath)
        {
            this.Configuration = new Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration { BasePath = basePath };

            ExceptionFactory = Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="EditApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public EditApi(Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Cloudmersive.APIClient.NET.ImageRecognition.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Cloudmersive.APIClient.NET.ImageRecognition.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<String, String> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(this.Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Normalizes image rotation and removes EXIF rotation data Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] EditAutoOrient (System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = EditAutoOrientWithHttpInfo(imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Normalizes image rotation and removes EXIF rotation data Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditAutoOrientWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling EditApi->EditAutoOrient");

            var localVarPath = "/image/edit/auto-orient/remove-exif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditAutoOrient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Normalizes image rotation and removes EXIF rotation data Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditAutoOrientAsync (System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await EditAutoOrientAsyncWithHttpInfo(imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Normalizes image rotation and removes EXIF rotation data Automatically orients the input image based on EXIF information and then removes the EXIF information.  EXIF is an additional set of information stored in some images taken with cell phone cameras based on the orientation of the camera.  By normalizing rotation and removing EXIF data these images become much easier to process.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditAutoOrientAsyncWithHttpInfo (System.IO.Stream imageFile)
        {
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling EditApi->EditAutoOrient");

            var localVarPath = "/image/edit/auto-orient/remove-exif";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditAutoOrient", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Composite two images together Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;</param>
        /// <param name="baseImage">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <param name="layeredImage">Image to layer on top of the base image.</param>
        /// <returns>byte[]</returns>
        public byte[] EditCompositeBasic (string location, System.IO.Stream baseImage, System.IO.Stream layeredImage)
        {
             ApiResponse<byte[]> localVarResponse = EditCompositeBasicWithHttpInfo(location, baseImage, layeredImage);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Composite two images together Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;</param>
        /// <param name="baseImage">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <param name="layeredImage">Image to layer on top of the base image.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditCompositeBasicWithHttpInfo (string location, System.IO.Stream baseImage, System.IO.Stream layeredImage)
        {
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling EditApi->EditCompositeBasic");
            // verify the required parameter 'baseImage' is set
            if (baseImage == null)
                throw new ApiException(400, "Missing required parameter 'baseImage' when calling EditApi->EditCompositeBasic");
            // verify the required parameter 'layeredImage' is set
            if (layeredImage == null)
                throw new ApiException(400, "Missing required parameter 'layeredImage' when calling EditApi->EditCompositeBasic");

            var localVarPath = "/image/edit/composite/{location}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (location != null) localVarPathParams.Add("location", this.Configuration.ApiClient.ParameterToString(location)); // path parameter
            if (baseImage != null) localVarFileParams.Add("baseImage", this.Configuration.ApiClient.ParameterToFile("baseImage", baseImage));
            if (layeredImage != null) localVarFileParams.Add("layeredImage", this.Configuration.ApiClient.ParameterToFile("layeredImage", layeredImage));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditCompositeBasic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Composite two images together Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;</param>
        /// <param name="baseImage">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <param name="layeredImage">Image to layer on top of the base image.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditCompositeBasicAsync (string location, System.IO.Stream baseImage, System.IO.Stream layeredImage)
        {
             ApiResponse<byte[]> localVarResponse = await EditCompositeBasicAsyncWithHttpInfo(location, baseImage, layeredImage);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Composite two images together Composites two input images together; a layered image onto a base image.  The first image you input is the base image.  The second image (the layered image) will be composited on top of this base image.  Supports PNG transparency.  To control padding you can include transparent pixels at the border(s) of your layered images as appropriate.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="location">Location to composite the layered images; possible values are: \&quot;center\&quot;, \&quot;top-left\&quot;, \&quot;top-center\&quot;, \&quot;top-right\&quot;, \&quot;center-left\&quot;, \&quot;center-right\&quot;, \&quot;bottom-left\&quot;, \&quot;bottom-center\&quot;, \&quot;bottom-right\&quot;</param>
        /// <param name="baseImage">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <param name="layeredImage">Image to layer on top of the base image.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditCompositeBasicAsyncWithHttpInfo (string location, System.IO.Stream baseImage, System.IO.Stream layeredImage)
        {
            // verify the required parameter 'location' is set
            if (location == null)
                throw new ApiException(400, "Missing required parameter 'location' when calling EditApi->EditCompositeBasic");
            // verify the required parameter 'baseImage' is set
            if (baseImage == null)
                throw new ApiException(400, "Missing required parameter 'baseImage' when calling EditApi->EditCompositeBasic");
            // verify the required parameter 'layeredImage' is set
            if (layeredImage == null)
                throw new ApiException(400, "Missing required parameter 'layeredImage' when calling EditApi->EditCompositeBasic");

            var localVarPath = "/image/edit/composite/{location}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (location != null) localVarPathParams.Add("location", this.Configuration.ApiClient.ParameterToString(location)); // path parameter
            if (baseImage != null) localVarFileParams.Add("baseImage", this.Configuration.ApiClient.ParameterToFile("baseImage", baseImage));
            if (layeredImage != null) localVarFileParams.Add("layeredImage", this.Configuration.ApiClient.ParameterToFile("layeredImage", layeredImage));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditCompositeBasic", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Adaptively adjust the contrast of the image to be more appealing and easy to see Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamma">Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] EditContrastAdaptive (double? gamma, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = EditContrastAdaptiveWithHttpInfo(gamma, imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Adaptively adjust the contrast of the image to be more appealing and easy to see Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamma">Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditContrastAdaptiveWithHttpInfo (double? gamma, System.IO.Stream imageFile)
        {
            // verify the required parameter 'gamma' is set
            if (gamma == null)
                throw new ApiException(400, "Missing required parameter 'gamma' when calling EditApi->EditContrastAdaptive");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling EditApi->EditContrastAdaptive");

            var localVarPath = "/image/edit/contrast/{gamma}/adaptive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamma != null) localVarPathParams.Add("gamma", this.Configuration.ApiClient.ParameterToString(gamma)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditContrastAdaptive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Adaptively adjust the contrast of the image to be more appealing and easy to see Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamma">Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditContrastAdaptiveAsync (double? gamma, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await EditContrastAdaptiveAsyncWithHttpInfo(gamma, imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Adaptively adjust the contrast of the image to be more appealing and easy to see Uses Gamma to adjust the contrast adaptively the way the human eye sees the world.  Results significantly improve the viewability and visual appeal of the image.
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gamma">Gamma value to adjust the contrast in the image.  Recommended value is 2.0.  Values between 0.0 and 1.0 will reduce contrast, while values above 1.0 will increase contrast.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditContrastAdaptiveAsyncWithHttpInfo (double? gamma, System.IO.Stream imageFile)
        {
            // verify the required parameter 'gamma' is set
            if (gamma == null)
                throw new ApiException(400, "Missing required parameter 'gamma' when calling EditApi->EditContrastAdaptive");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling EditApi->EditContrastAdaptive");

            var localVarPath = "/image/edit/contrast/{gamma}/adaptive";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (gamma != null) localVarPathParams.Add("gamma", this.Configuration.ApiClient.ParameterToString(gamma)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditContrastAdaptive", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Crop an image to a rectangular area Crop an image to a target rectangular area
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="left">The left edge of the rectangular crop area in pixels (X).</param>
        /// <param name="top">The top edge of the rectangular crop area in pixels (Y).</param>
        /// <param name="width">The width of the rectangular crop area in pixels.</param>
        /// <param name="height">The height of the rectangular crop area in pixels.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] EditCropRectangle (int? left, int? top, int? width, int? height, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = EditCropRectangleWithHttpInfo(left, top, width, height, imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Crop an image to a rectangular area Crop an image to a target rectangular area
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="left">The left edge of the rectangular crop area in pixels (X).</param>
        /// <param name="top">The top edge of the rectangular crop area in pixels (Y).</param>
        /// <param name="width">The width of the rectangular crop area in pixels.</param>
        /// <param name="height">The height of the rectangular crop area in pixels.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditCropRectangleWithHttpInfo (int? left, int? top, int? width, int? height, System.IO.Stream imageFile)
        {
            // verify the required parameter 'left' is set
            if (left == null)
                throw new ApiException(400, "Missing required parameter 'left' when calling EditApi->EditCropRectangle");
            // verify the required parameter 'top' is set
            if (top == null)
                throw new ApiException(400, "Missing required parameter 'top' when calling EditApi->EditCropRectangle");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling EditApi->EditCropRectangle");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling EditApi->EditCropRectangle");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling EditApi->EditCropRectangle");

            var localVarPath = "/image/edit/crop/rectangle/{left}/{top}/{width}/{height}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (left != null) localVarPathParams.Add("left", this.Configuration.ApiClient.ParameterToString(left)); // path parameter
            if (top != null) localVarPathParams.Add("top", this.Configuration.ApiClient.ParameterToString(top)); // path parameter
            if (width != null) localVarPathParams.Add("width", this.Configuration.ApiClient.ParameterToString(width)); // path parameter
            if (height != null) localVarPathParams.Add("height", this.Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditCropRectangle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Crop an image to a rectangular area Crop an image to a target rectangular area
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="left">The left edge of the rectangular crop area in pixels (X).</param>
        /// <param name="top">The top edge of the rectangular crop area in pixels (Y).</param>
        /// <param name="width">The width of the rectangular crop area in pixels.</param>
        /// <param name="height">The height of the rectangular crop area in pixels.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditCropRectangleAsync (int? left, int? top, int? width, int? height, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await EditCropRectangleAsyncWithHttpInfo(left, top, width, height, imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Crop an image to a rectangular area Crop an image to a target rectangular area
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="left">The left edge of the rectangular crop area in pixels (X).</param>
        /// <param name="top">The top edge of the rectangular crop area in pixels (Y).</param>
        /// <param name="width">The width of the rectangular crop area in pixels.</param>
        /// <param name="height">The height of the rectangular crop area in pixels.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditCropRectangleAsyncWithHttpInfo (int? left, int? top, int? width, int? height, System.IO.Stream imageFile)
        {
            // verify the required parameter 'left' is set
            if (left == null)
                throw new ApiException(400, "Missing required parameter 'left' when calling EditApi->EditCropRectangle");
            // verify the required parameter 'top' is set
            if (top == null)
                throw new ApiException(400, "Missing required parameter 'top' when calling EditApi->EditCropRectangle");
            // verify the required parameter 'width' is set
            if (width == null)
                throw new ApiException(400, "Missing required parameter 'width' when calling EditApi->EditCropRectangle");
            // verify the required parameter 'height' is set
            if (height == null)
                throw new ApiException(400, "Missing required parameter 'height' when calling EditApi->EditCropRectangle");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling EditApi->EditCropRectangle");

            var localVarPath = "/image/edit/crop/rectangle/{left}/{top}/{width}/{height}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (left != null) localVarPathParams.Add("left", this.Configuration.ApiClient.ParameterToString(left)); // path parameter
            if (top != null) localVarPathParams.Add("top", this.Configuration.ApiClient.ParameterToString(top)); // path parameter
            if (width != null) localVarPathParams.Add("width", this.Configuration.ApiClient.ParameterToString(width)); // path parameter
            if (height != null) localVarPathParams.Add("height", this.Configuration.ApiClient.ParameterToString(height)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditCropRectangle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Draw a polygon onto an image Draw one or more polygons, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>byte[]</returns>
        public byte[] EditDrawPolygon (DrawPolygonRequest request)
        {
             ApiResponse<byte[]> localVarResponse = EditDrawPolygonWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Draw a polygon onto an image Draw one or more polygons, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDrawPolygonWithHttpInfo (DrawPolygonRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditApi->EditDrawPolygon");

            var localVarPath = "/image/edit/draw/polygon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDrawPolygon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Draw a polygon onto an image Draw one or more polygons, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDrawPolygonAsync (DrawPolygonRequest request)
        {
             ApiResponse<byte[]> localVarResponse = await EditDrawPolygonAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Draw a polygon onto an image Draw one or more polygons, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDrawPolygonAsyncWithHttpInfo (DrawPolygonRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditApi->EditDrawPolygon");

            var localVarPath = "/image/edit/draw/polygon";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDrawPolygon", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Draw a rectangle onto an image Draw one or more rectangles, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>byte[]</returns>
        public byte[] EditDrawRectangle (DrawRectangleRequest request)
        {
             ApiResponse<byte[]> localVarResponse = EditDrawRectangleWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Draw a rectangle onto an image Draw one or more rectangles, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDrawRectangleWithHttpInfo (DrawRectangleRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditApi->EditDrawRectangle");

            var localVarPath = "/image/edit/draw/rectangle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDrawRectangle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Draw a rectangle onto an image Draw one or more rectangles, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDrawRectangleAsync (DrawRectangleRequest request)
        {
             ApiResponse<byte[]> localVarResponse = await EditDrawRectangleAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Draw a rectangle onto an image Draw one or more rectangles, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDrawRectangleAsyncWithHttpInfo (DrawRectangleRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditApi->EditDrawRectangle");

            var localVarPath = "/image/edit/draw/rectangle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDrawRectangle", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Draw text onto an image Draw one or more pieces of text, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>byte[]</returns>
        public byte[] EditDrawText (DrawTextRequest request)
        {
             ApiResponse<byte[]> localVarResponse = EditDrawTextWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Draw text onto an image Draw one or more pieces of text, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDrawTextWithHttpInfo (DrawTextRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditApi->EditDrawText");

            var localVarPath = "/image/edit/draw/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDrawText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Draw text onto an image Draw one or more pieces of text, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDrawTextAsync (DrawTextRequest request)
        {
             ApiResponse<byte[]> localVarResponse = await EditDrawTextAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Draw text onto an image Draw one or more pieces of text, with customized visuals, onto an image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request"></param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDrawTextAsyncWithHttpInfo (DrawTextRequest request)
        {
            // verify the required parameter 'request' is set
            if (request == null)
                throw new ApiException(400, "Missing required parameter 'request' when calling EditApi->EditDrawText");

            var localVarPath = "/image/edit/draw/text";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/xml", 
                "text/xml", 
                "application/x-www-form-urlencoded"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "image/png"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (request != null && request.GetType() != typeof(byte[]))
            {
                localVarPostBody = this.Configuration.ApiClient.Serialize(request); // http body (model) parameter
            }
            else
            {
                localVarPostBody = request; // byte array
            }

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDrawText", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Add a customizeable drop shadow to an image Add a customizeable drop shadow to the image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="sigma">Sigma (blur distance) of the drop shadow</param>
        /// <param name="opacity">Opacity of the drop shadow; 0 is 0% and 100 is 100%</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] EditDropShadow (int? X, int? Y, int? sigma, int? opacity, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = EditDropShadowWithHttpInfo(X, Y, sigma, opacity, imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Add a customizeable drop shadow to an image Add a customizeable drop shadow to the image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="sigma">Sigma (blur distance) of the drop shadow</param>
        /// <param name="opacity">Opacity of the drop shadow; 0 is 0% and 100 is 100%</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditDropShadowWithHttpInfo (int? X, int? Y, int? sigma, int? opacity, System.IO.Stream imageFile)
        {
            // verify the required parameter 'X' is set
            if (X == null)
                throw new ApiException(400, "Missing required parameter 'X' when calling EditApi->EditDropShadow");
            // verify the required parameter 'Y' is set
            if (Y == null)
                throw new ApiException(400, "Missing required parameter 'Y' when calling EditApi->EditDropShadow");
            // verify the required parameter 'sigma' is set
            if (sigma == null)
                throw new ApiException(400, "Missing required parameter 'sigma' when calling EditApi->EditDropShadow");
            // verify the required parameter 'opacity' is set
            if (opacity == null)
                throw new ApiException(400, "Missing required parameter 'opacity' when calling EditApi->EditDropShadow");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling EditApi->EditDropShadow");

            var localVarPath = "/image/edit/drop-shadow/{X}/{Y}/{sigma}/{opacity}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (X != null) localVarPathParams.Add("X", this.Configuration.ApiClient.ParameterToString(X)); // path parameter
            if (Y != null) localVarPathParams.Add("Y", this.Configuration.ApiClient.ParameterToString(Y)); // path parameter
            if (sigma != null) localVarPathParams.Add("sigma", this.Configuration.ApiClient.ParameterToString(sigma)); // path parameter
            if (opacity != null) localVarPathParams.Add("opacity", this.Configuration.ApiClient.ParameterToString(opacity)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDropShadow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Add a customizeable drop shadow to an image Add a customizeable drop shadow to the image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="sigma">Sigma (blur distance) of the drop shadow</param>
        /// <param name="opacity">Opacity of the drop shadow; 0 is 0% and 100 is 100%</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditDropShadowAsync (int? X, int? Y, int? sigma, int? opacity, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await EditDropShadowAsyncWithHttpInfo(X, Y, sigma, opacity, imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Add a customizeable drop shadow to an image Add a customizeable drop shadow to the image
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="X"></param>
        /// <param name="Y"></param>
        /// <param name="sigma">Sigma (blur distance) of the drop shadow</param>
        /// <param name="opacity">Opacity of the drop shadow; 0 is 0% and 100 is 100%</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditDropShadowAsyncWithHttpInfo (int? X, int? Y, int? sigma, int? opacity, System.IO.Stream imageFile)
        {
            // verify the required parameter 'X' is set
            if (X == null)
                throw new ApiException(400, "Missing required parameter 'X' when calling EditApi->EditDropShadow");
            // verify the required parameter 'Y' is set
            if (Y == null)
                throw new ApiException(400, "Missing required parameter 'Y' when calling EditApi->EditDropShadow");
            // verify the required parameter 'sigma' is set
            if (sigma == null)
                throw new ApiException(400, "Missing required parameter 'sigma' when calling EditApi->EditDropShadow");
            // verify the required parameter 'opacity' is set
            if (opacity == null)
                throw new ApiException(400, "Missing required parameter 'opacity' when calling EditApi->EditDropShadow");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling EditApi->EditDropShadow");

            var localVarPath = "/image/edit/drop-shadow/{X}/{Y}/{sigma}/{opacity}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (X != null) localVarPathParams.Add("X", this.Configuration.ApiClient.ParameterToString(X)); // path parameter
            if (Y != null) localVarPathParams.Add("Y", this.Configuration.ApiClient.ParameterToString(Y)); // path parameter
            if (sigma != null) localVarPathParams.Add("sigma", this.Configuration.ApiClient.ParameterToString(sigma)); // path parameter
            if (opacity != null) localVarPathParams.Add("opacity", this.Configuration.ApiClient.ParameterToString(opacity)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditDropShadow", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Rotate an image any number of degrees Rotates an image by an arbitrary number of degrees
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees to rotate the image; values range from 0.0 to 360.0.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>byte[]</returns>
        public byte[] EditRotate (double? degrees, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = EditRotateWithHttpInfo(degrees, imageFile);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Rotate an image any number of degrees Rotates an image by an arbitrary number of degrees
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees to rotate the image; values range from 0.0 to 360.0.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>ApiResponse of byte[]</returns>
        public ApiResponse< byte[] > EditRotateWithHttpInfo (double? degrees, System.IO.Stream imageFile)
        {
            // verify the required parameter 'degrees' is set
            if (degrees == null)
                throw new ApiException(400, "Missing required parameter 'degrees' when calling EditApi->EditRotate");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling EditApi->EditRotate");

            var localVarPath = "/image/edit/rotate/{degrees}/angle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (degrees != null) localVarPathParams.Add("degrees", this.Configuration.ApiClient.ParameterToString(degrees)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) this.Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditRotate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

        /// <summary>
        /// Rotate an image any number of degrees Rotates an image by an arbitrary number of degrees
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees to rotate the image; values range from 0.0 to 360.0.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of byte[]</returns>
        public async System.Threading.Tasks.Task<byte[]> EditRotateAsync (double? degrees, System.IO.Stream imageFile)
        {
             ApiResponse<byte[]> localVarResponse = await EditRotateAsyncWithHttpInfo(degrees, imageFile);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Rotate an image any number of degrees Rotates an image by an arbitrary number of degrees
        /// </summary>
        /// <exception cref="Cloudmersive.APIClient.NET.ImageRecognition.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="degrees">Degrees to rotate the image; values range from 0.0 to 360.0.</param>
        /// <param name="imageFile">Image file to perform the operation on.  Common file formats such as PNG, JPEG are supported.</param>
        /// <returns>Task of ApiResponse (byte[])</returns>
        public async System.Threading.Tasks.Task<ApiResponse<byte[]>> EditRotateAsyncWithHttpInfo (double? degrees, System.IO.Stream imageFile)
        {
            // verify the required parameter 'degrees' is set
            if (degrees == null)
                throw new ApiException(400, "Missing required parameter 'degrees' when calling EditApi->EditRotate");
            // verify the required parameter 'imageFile' is set
            if (imageFile == null)
                throw new ApiException(400, "Missing required parameter 'imageFile' when calling EditApi->EditRotate");

            var localVarPath = "/image/edit/rotate/{degrees}/angle";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new List<KeyValuePair<String, String>>();
            var localVarHeaderParams = new Dictionary<String, String>(this.Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "multipart/form-data"
            };
            String localVarHttpContentType = this.Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/octet-stream"
            };
            String localVarHttpHeaderAccept = this.Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (degrees != null) localVarPathParams.Add("degrees", this.Configuration.ApiClient.ParameterToString(degrees)); // path parameter
            if (imageFile != null) localVarFileParams.Add("imageFile", this.Configuration.ApiClient.ParameterToFile("imageFile", imageFile));

            // authentication (Apikey) required
            if (!String.IsNullOrEmpty(this.Configuration.GetApiKeyWithPrefix("Apikey")))
            {
                localVarHeaderParams["Apikey"] = this.Configuration.GetApiKeyWithPrefix("Apikey");
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await this.Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("EditRotate", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<byte[]>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (byte[]) this.Configuration.ApiClient.Deserialize(localVarResponse, typeof(byte[])));
        }

    }
}
